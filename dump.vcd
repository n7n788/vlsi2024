$date
    Jul 29, 2024  06:30:12
$end
$version
    TOOL:	xmsim	22.09-s007
$end
$timescale
    10 ps
$end

$scope module test32 $end

$scope module top0 $end
$var wire      1 !    reset_  $end
$var wire      1 "    clk  $end
$var wire      1 #    memread0  $end
$var wire      1 $    memwrite0  $end
$var wire      1 %    rw0_  $end
$var wire     10 &    addr0 [9:0] $end
$var wire     32 '    idata0 [31:0] $end
$var wire     32 (    odata0 [31:0] $end
$var wire      1 )    breq0_  $end
$var wire      1 *    bgrt0_  $end
$var wire      1 +    memread1  $end
$var wire      1 +    memwrite1  $end
$var wire      1 ,    rw1_  $end
$var wire     10 -    addr1 [9:0] $end
$var wire     32 .    idata1 [31:0] $end
$var wire     32 (    odata1 [31:0] $end
$var wire      1 +    breq1_  $end
$var wire      1 /    bgrt1_  $end
$var wire     10 0    addr [9:0] $end
$var wire     32 1    idata [31:0] $end
$var wire     32 2    odata [31:0] $end
$var wire      1 3    rw_  $end

$scope module devices0 $end
$var wire     10 0    addr [9:0] $end
$var wire     32 1    idata [31:0] $end
$var wire     32 2    odata [31:0] $end
$var wire      1 3    rw_  $end
$var wire      1 !    reset_  $end
$var wire      1 "    clk  $end
$var wire     32 4    odata0 [31:0] $end
$var wire     32 5    odata1 [31:0] $end
$var wire     32 6    odata2 [31:0] $end
$var wire     32 7    odata3 [31:0] $end
$var wire      1 8    cs0_  $end
$var wire      1 9    cs1_  $end
$var wire      1 :    cs2_  $end
$var wire      1 ;    cs3_  $end

$scope module addrdec0 $end
$var wire     10 0    addr [9:0] $end
$var wire      1 8    cs0_  $end
$var wire      1 9    cs1_  $end
$var wire      1 :    cs2_  $end
$var wire      1 ;    cs3_  $end
$upscope $end


$scope module sram0 $end
$var wire      8 <    addr [7:0] $end
$var wire     32 1    idata [31:0] $end
$var wire     32 4    odata [31:0] $end
$var wire      1 8    cs_  $end
$var wire      1 3    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 =    mem[255] [31:0] $end
$var reg      32 >    mem[254] [31:0] $end
$var reg      32 ?    mem[253] [31:0] $end
$var reg      32 @    mem[252] [31:0] $end
$var reg      32 A    mem[251] [31:0] $end
$var reg      32 B    mem[250] [31:0] $end
$var reg      32 C    mem[249] [31:0] $end
$var reg      32 D    mem[248] [31:0] $end
$var reg      32 E    mem[247] [31:0] $end
$var reg      32 F    mem[246] [31:0] $end
$var reg      32 G    mem[245] [31:0] $end
$var reg      32 H    mem[244] [31:0] $end
$var reg      32 I    mem[243] [31:0] $end
$var reg      32 J    mem[242] [31:0] $end
$var reg      32 K    mem[241] [31:0] $end
$var reg      32 L    mem[240] [31:0] $end
$var reg      32 M    mem[239] [31:0] $end
$var reg      32 N    mem[238] [31:0] $end
$var reg      32 O    mem[237] [31:0] $end
$var reg      32 P    mem[236] [31:0] $end
$var reg      32 Q    mem[235] [31:0] $end
$var reg      32 R    mem[234] [31:0] $end
$var reg      32 S    mem[233] [31:0] $end
$var reg      32 T    mem[232] [31:0] $end
$var reg      32 U    mem[231] [31:0] $end
$var reg      32 V    mem[230] [31:0] $end
$var reg      32 W    mem[229] [31:0] $end
$var reg      32 X    mem[228] [31:0] $end
$var reg      32 Y    mem[227] [31:0] $end
$var reg      32 Z    mem[226] [31:0] $end
$var reg      32 [    mem[225] [31:0] $end
$var reg      32 \    mem[224] [31:0] $end
$var reg      32 ]    mem[223] [31:0] $end
$var reg      32 ^    mem[222] [31:0] $end
$var reg      32 _    mem[221] [31:0] $end
$var reg      32 `    mem[220] [31:0] $end
$var reg      32 a    mem[219] [31:0] $end
$var reg      32 b    mem[218] [31:0] $end
$var reg      32 c    mem[217] [31:0] $end
$var reg      32 d    mem[216] [31:0] $end
$var reg      32 e    mem[215] [31:0] $end
$var reg      32 f    mem[214] [31:0] $end
$var reg      32 g    mem[213] [31:0] $end
$var reg      32 h    mem[212] [31:0] $end
$var reg      32 i    mem[211] [31:0] $end
$var reg      32 j    mem[210] [31:0] $end
$var reg      32 k    mem[209] [31:0] $end
$var reg      32 l    mem[208] [31:0] $end
$var reg      32 m    mem[207] [31:0] $end
$var reg      32 n    mem[206] [31:0] $end
$var reg      32 o    mem[205] [31:0] $end
$var reg      32 p    mem[204] [31:0] $end
$var reg      32 q    mem[203] [31:0] $end
$var reg      32 r    mem[202] [31:0] $end
$var reg      32 s    mem[201] [31:0] $end
$var reg      32 t    mem[200] [31:0] $end
$var reg      32 u    mem[199] [31:0] $end
$var reg      32 v    mem[198] [31:0] $end
$var reg      32 w    mem[197] [31:0] $end
$var reg      32 x    mem[196] [31:0] $end
$var reg      32 y    mem[195] [31:0] $end
$var reg      32 z    mem[194] [31:0] $end
$var reg      32 {    mem[193] [31:0] $end
$var reg      32 |    mem[192] [31:0] $end
$var reg      32 }    mem[191] [31:0] $end
$var reg      32 ~    mem[190] [31:0] $end
$var reg      32 !!   mem[189] [31:0] $end
$var reg      32 "!   mem[188] [31:0] $end
$var reg      32 #!   mem[187] [31:0] $end
$var reg      32 $!   mem[186] [31:0] $end
$var reg      32 %!   mem[185] [31:0] $end
$var reg      32 &!   mem[184] [31:0] $end
$var reg      32 '!   mem[183] [31:0] $end
$var reg      32 (!   mem[182] [31:0] $end
$var reg      32 )!   mem[181] [31:0] $end
$var reg      32 *!   mem[180] [31:0] $end
$var reg      32 +!   mem[179] [31:0] $end
$var reg      32 ,!   mem[178] [31:0] $end
$var reg      32 -!   mem[177] [31:0] $end
$var reg      32 .!   mem[176] [31:0] $end
$var reg      32 /!   mem[175] [31:0] $end
$var reg      32 0!   mem[174] [31:0] $end
$var reg      32 1!   mem[173] [31:0] $end
$var reg      32 2!   mem[172] [31:0] $end
$var reg      32 3!   mem[171] [31:0] $end
$var reg      32 4!   mem[170] [31:0] $end
$var reg      32 5!   mem[169] [31:0] $end
$var reg      32 6!   mem[168] [31:0] $end
$var reg      32 7!   mem[167] [31:0] $end
$var reg      32 8!   mem[166] [31:0] $end
$var reg      32 9!   mem[165] [31:0] $end
$var reg      32 :!   mem[164] [31:0] $end
$var reg      32 ;!   mem[163] [31:0] $end
$var reg      32 <!   mem[162] [31:0] $end
$var reg      32 =!   mem[161] [31:0] $end
$var reg      32 >!   mem[160] [31:0] $end
$var reg      32 ?!   mem[159] [31:0] $end
$var reg      32 @!   mem[158] [31:0] $end
$var reg      32 A!   mem[157] [31:0] $end
$var reg      32 B!   mem[156] [31:0] $end
$var reg      32 C!   mem[155] [31:0] $end
$var reg      32 D!   mem[154] [31:0] $end
$var reg      32 E!   mem[153] [31:0] $end
$var reg      32 F!   mem[152] [31:0] $end
$var reg      32 G!   mem[151] [31:0] $end
$var reg      32 H!   mem[150] [31:0] $end
$var reg      32 I!   mem[149] [31:0] $end
$var reg      32 J!   mem[148] [31:0] $end
$var reg      32 K!   mem[147] [31:0] $end
$var reg      32 L!   mem[146] [31:0] $end
$var reg      32 M!   mem[145] [31:0] $end
$var reg      32 N!   mem[144] [31:0] $end
$var reg      32 O!   mem[143] [31:0] $end
$var reg      32 P!   mem[142] [31:0] $end
$var reg      32 Q!   mem[141] [31:0] $end
$var reg      32 R!   mem[140] [31:0] $end
$var reg      32 S!   mem[139] [31:0] $end
$var reg      32 T!   mem[138] [31:0] $end
$var reg      32 U!   mem[137] [31:0] $end
$var reg      32 V!   mem[136] [31:0] $end
$var reg      32 W!   mem[135] [31:0] $end
$var reg      32 X!   mem[134] [31:0] $end
$var reg      32 Y!   mem[133] [31:0] $end
$var reg      32 Z!   mem[132] [31:0] $end
$var reg      32 [!   mem[131] [31:0] $end
$var reg      32 \!   mem[130] [31:0] $end
$var reg      32 ]!   mem[129] [31:0] $end
$var reg      32 ^!   mem[128] [31:0] $end
$var reg      32 _!   mem[127] [31:0] $end
$var reg      32 `!   mem[126] [31:0] $end
$var reg      32 a!   mem[125] [31:0] $end
$var reg      32 b!   mem[124] [31:0] $end
$var reg      32 c!   mem[123] [31:0] $end
$var reg      32 d!   mem[122] [31:0] $end
$var reg      32 e!   mem[121] [31:0] $end
$var reg      32 f!   mem[120] [31:0] $end
$var reg      32 g!   mem[119] [31:0] $end
$var reg      32 h!   mem[118] [31:0] $end
$var reg      32 i!   mem[117] [31:0] $end
$var reg      32 j!   mem[116] [31:0] $end
$var reg      32 k!   mem[115] [31:0] $end
$var reg      32 l!   mem[114] [31:0] $end
$var reg      32 m!   mem[113] [31:0] $end
$var reg      32 n!   mem[112] [31:0] $end
$var reg      32 o!   mem[111] [31:0] $end
$var reg      32 p!   mem[110] [31:0] $end
$var reg      32 q!   mem[109] [31:0] $end
$var reg      32 r!   mem[108] [31:0] $end
$var reg      32 s!   mem[107] [31:0] $end
$var reg      32 t!   mem[106] [31:0] $end
$var reg      32 u!   mem[105] [31:0] $end
$var reg      32 v!   mem[104] [31:0] $end
$var reg      32 w!   mem[103] [31:0] $end
$var reg      32 x!   mem[102] [31:0] $end
$var reg      32 y!   mem[101] [31:0] $end
$var reg      32 z!   mem[100] [31:0] $end
$var reg      32 {!   mem[99] [31:0] $end
$var reg      32 |!   mem[98] [31:0] $end
$var reg      32 }!   mem[97] [31:0] $end
$var reg      32 ~!   mem[96] [31:0] $end
$var reg      32 !"   mem[95] [31:0] $end
$var reg      32 ""   mem[94] [31:0] $end
$var reg      32 #"   mem[93] [31:0] $end
$var reg      32 $"   mem[92] [31:0] $end
$var reg      32 %"   mem[91] [31:0] $end
$var reg      32 &"   mem[90] [31:0] $end
$var reg      32 '"   mem[89] [31:0] $end
$var reg      32 ("   mem[88] [31:0] $end
$var reg      32 )"   mem[87] [31:0] $end
$var reg      32 *"   mem[86] [31:0] $end
$var reg      32 +"   mem[85] [31:0] $end
$var reg      32 ,"   mem[84] [31:0] $end
$var reg      32 -"   mem[83] [31:0] $end
$var reg      32 ."   mem[82] [31:0] $end
$var reg      32 /"   mem[81] [31:0] $end
$var reg      32 0"   mem[80] [31:0] $end
$var reg      32 1"   mem[79] [31:0] $end
$var reg      32 2"   mem[78] [31:0] $end
$var reg      32 3"   mem[77] [31:0] $end
$var reg      32 4"   mem[76] [31:0] $end
$var reg      32 5"   mem[75] [31:0] $end
$var reg      32 6"   mem[74] [31:0] $end
$var reg      32 7"   mem[73] [31:0] $end
$var reg      32 8"   mem[72] [31:0] $end
$var reg      32 9"   mem[71] [31:0] $end
$var reg      32 :"   mem[70] [31:0] $end
$var reg      32 ;"   mem[69] [31:0] $end
$var reg      32 <"   mem[68] [31:0] $end
$var reg      32 ="   mem[67] [31:0] $end
$var reg      32 >"   mem[66] [31:0] $end
$var reg      32 ?"   mem[65] [31:0] $end
$var reg      32 @"   mem[64] [31:0] $end
$var reg      32 A"   mem[63] [31:0] $end
$var reg      32 B"   mem[62] [31:0] $end
$var reg      32 C"   mem[61] [31:0] $end
$var reg      32 D"   mem[60] [31:0] $end
$var reg      32 E"   mem[59] [31:0] $end
$var reg      32 F"   mem[58] [31:0] $end
$var reg      32 G"   mem[57] [31:0] $end
$var reg      32 H"   mem[56] [31:0] $end
$var reg      32 I"   mem[55] [31:0] $end
$var reg      32 J"   mem[54] [31:0] $end
$var reg      32 K"   mem[53] [31:0] $end
$var reg      32 L"   mem[52] [31:0] $end
$var reg      32 M"   mem[51] [31:0] $end
$var reg      32 N"   mem[50] [31:0] $end
$var reg      32 O"   mem[49] [31:0] $end
$var reg      32 P"   mem[48] [31:0] $end
$var reg      32 Q"   mem[47] [31:0] $end
$var reg      32 R"   mem[46] [31:0] $end
$var reg      32 S"   mem[45] [31:0] $end
$var reg      32 T"   mem[44] [31:0] $end
$var reg      32 U"   mem[43] [31:0] $end
$var reg      32 V"   mem[42] [31:0] $end
$var reg      32 W"   mem[41] [31:0] $end
$var reg      32 X"   mem[40] [31:0] $end
$var reg      32 Y"   mem[39] [31:0] $end
$var reg      32 Z"   mem[38] [31:0] $end
$var reg      32 ["   mem[37] [31:0] $end
$var reg      32 \"   mem[36] [31:0] $end
$var reg      32 ]"   mem[35] [31:0] $end
$var reg      32 ^"   mem[34] [31:0] $end
$var reg      32 _"   mem[33] [31:0] $end
$var reg      32 `"   mem[32] [31:0] $end
$var reg      32 a"   mem[31] [31:0] $end
$var reg      32 b"   mem[30] [31:0] $end
$var reg      32 c"   mem[29] [31:0] $end
$var reg      32 d"   mem[28] [31:0] $end
$var reg      32 e"   mem[27] [31:0] $end
$var reg      32 f"   mem[26] [31:0] $end
$var reg      32 g"   mem[25] [31:0] $end
$var reg      32 h"   mem[24] [31:0] $end
$var reg      32 i"   mem[23] [31:0] $end
$var reg      32 j"   mem[22] [31:0] $end
$var reg      32 k"   mem[21] [31:0] $end
$var reg      32 l"   mem[20] [31:0] $end
$var reg      32 m"   mem[19] [31:0] $end
$var reg      32 n"   mem[18] [31:0] $end
$var reg      32 o"   mem[17] [31:0] $end
$var reg      32 p"   mem[16] [31:0] $end
$var reg      32 q"   mem[15] [31:0] $end
$var reg      32 r"   mem[14] [31:0] $end
$var reg      32 s"   mem[13] [31:0] $end
$var reg      32 t"   mem[12] [31:0] $end
$var reg      32 u"   mem[11] [31:0] $end
$var reg      32 v"   mem[10] [31:0] $end
$var reg      32 w"   mem[9] [31:0] $end
$var reg      32 x"   mem[8] [31:0] $end
$var reg      32 y"   mem[7] [31:0] $end
$var reg      32 z"   mem[6] [31:0] $end
$var reg      32 {"   mem[5] [31:0] $end
$var reg      32 |"   mem[4] [31:0] $end
$var reg      32 }"   mem[3] [31:0] $end
$var reg      32 ~"   mem[2] [31:0] $end
$var reg      32 !#   mem[1] [31:0] $end
$var reg      32 "#   mem[0] [31:0] $end
$upscope $end


$scope module sram1 $end
$var wire      8 <    addr [7:0] $end
$var wire     32 1    idata [31:0] $end
$var wire     32 5    odata [31:0] $end
$var wire      1 9    cs_  $end
$var wire      1 3    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 ##   mem[255] [31:0] $end
$var reg      32 $#   mem[254] [31:0] $end
$var reg      32 %#   mem[253] [31:0] $end
$var reg      32 &#   mem[252] [31:0] $end
$var reg      32 '#   mem[251] [31:0] $end
$var reg      32 (#   mem[250] [31:0] $end
$var reg      32 )#   mem[249] [31:0] $end
$var reg      32 *#   mem[248] [31:0] $end
$var reg      32 +#   mem[247] [31:0] $end
$var reg      32 ,#   mem[246] [31:0] $end
$var reg      32 -#   mem[245] [31:0] $end
$var reg      32 .#   mem[244] [31:0] $end
$var reg      32 /#   mem[243] [31:0] $end
$var reg      32 0#   mem[242] [31:0] $end
$var reg      32 1#   mem[241] [31:0] $end
$var reg      32 2#   mem[240] [31:0] $end
$var reg      32 3#   mem[239] [31:0] $end
$var reg      32 4#   mem[238] [31:0] $end
$var reg      32 5#   mem[237] [31:0] $end
$var reg      32 6#   mem[236] [31:0] $end
$var reg      32 7#   mem[235] [31:0] $end
$var reg      32 8#   mem[234] [31:0] $end
$var reg      32 9#   mem[233] [31:0] $end
$var reg      32 :#   mem[232] [31:0] $end
$var reg      32 ;#   mem[231] [31:0] $end
$var reg      32 <#   mem[230] [31:0] $end
$var reg      32 =#   mem[229] [31:0] $end
$var reg      32 >#   mem[228] [31:0] $end
$var reg      32 ?#   mem[227] [31:0] $end
$var reg      32 @#   mem[226] [31:0] $end
$var reg      32 A#   mem[225] [31:0] $end
$var reg      32 B#   mem[224] [31:0] $end
$var reg      32 C#   mem[223] [31:0] $end
$var reg      32 D#   mem[222] [31:0] $end
$var reg      32 E#   mem[221] [31:0] $end
$var reg      32 F#   mem[220] [31:0] $end
$var reg      32 G#   mem[219] [31:0] $end
$var reg      32 H#   mem[218] [31:0] $end
$var reg      32 I#   mem[217] [31:0] $end
$var reg      32 J#   mem[216] [31:0] $end
$var reg      32 K#   mem[215] [31:0] $end
$var reg      32 L#   mem[214] [31:0] $end
$var reg      32 M#   mem[213] [31:0] $end
$var reg      32 N#   mem[212] [31:0] $end
$var reg      32 O#   mem[211] [31:0] $end
$var reg      32 P#   mem[210] [31:0] $end
$var reg      32 Q#   mem[209] [31:0] $end
$var reg      32 R#   mem[208] [31:0] $end
$var reg      32 S#   mem[207] [31:0] $end
$var reg      32 T#   mem[206] [31:0] $end
$var reg      32 U#   mem[205] [31:0] $end
$var reg      32 V#   mem[204] [31:0] $end
$var reg      32 W#   mem[203] [31:0] $end
$var reg      32 X#   mem[202] [31:0] $end
$var reg      32 Y#   mem[201] [31:0] $end
$var reg      32 Z#   mem[200] [31:0] $end
$var reg      32 [#   mem[199] [31:0] $end
$var reg      32 \#   mem[198] [31:0] $end
$var reg      32 ]#   mem[197] [31:0] $end
$var reg      32 ^#   mem[196] [31:0] $end
$var reg      32 _#   mem[195] [31:0] $end
$var reg      32 `#   mem[194] [31:0] $end
$var reg      32 a#   mem[193] [31:0] $end
$var reg      32 b#   mem[192] [31:0] $end
$var reg      32 c#   mem[191] [31:0] $end
$var reg      32 d#   mem[190] [31:0] $end
$var reg      32 e#   mem[189] [31:0] $end
$var reg      32 f#   mem[188] [31:0] $end
$var reg      32 g#   mem[187] [31:0] $end
$var reg      32 h#   mem[186] [31:0] $end
$var reg      32 i#   mem[185] [31:0] $end
$var reg      32 j#   mem[184] [31:0] $end
$var reg      32 k#   mem[183] [31:0] $end
$var reg      32 l#   mem[182] [31:0] $end
$var reg      32 m#   mem[181] [31:0] $end
$var reg      32 n#   mem[180] [31:0] $end
$var reg      32 o#   mem[179] [31:0] $end
$var reg      32 p#   mem[178] [31:0] $end
$var reg      32 q#   mem[177] [31:0] $end
$var reg      32 r#   mem[176] [31:0] $end
$var reg      32 s#   mem[175] [31:0] $end
$var reg      32 t#   mem[174] [31:0] $end
$var reg      32 u#   mem[173] [31:0] $end
$var reg      32 v#   mem[172] [31:0] $end
$var reg      32 w#   mem[171] [31:0] $end
$var reg      32 x#   mem[170] [31:0] $end
$var reg      32 y#   mem[169] [31:0] $end
$var reg      32 z#   mem[168] [31:0] $end
$var reg      32 {#   mem[167] [31:0] $end
$var reg      32 |#   mem[166] [31:0] $end
$var reg      32 }#   mem[165] [31:0] $end
$var reg      32 ~#   mem[164] [31:0] $end
$var reg      32 !$   mem[163] [31:0] $end
$var reg      32 "$   mem[162] [31:0] $end
$var reg      32 #$   mem[161] [31:0] $end
$var reg      32 $$   mem[160] [31:0] $end
$var reg      32 %$   mem[159] [31:0] $end
$var reg      32 &$   mem[158] [31:0] $end
$var reg      32 '$   mem[157] [31:0] $end
$var reg      32 ($   mem[156] [31:0] $end
$var reg      32 )$   mem[155] [31:0] $end
$var reg      32 *$   mem[154] [31:0] $end
$var reg      32 +$   mem[153] [31:0] $end
$var reg      32 ,$   mem[152] [31:0] $end
$var reg      32 -$   mem[151] [31:0] $end
$var reg      32 .$   mem[150] [31:0] $end
$var reg      32 /$   mem[149] [31:0] $end
$var reg      32 0$   mem[148] [31:0] $end
$var reg      32 1$   mem[147] [31:0] $end
$var reg      32 2$   mem[146] [31:0] $end
$var reg      32 3$   mem[145] [31:0] $end
$var reg      32 4$   mem[144] [31:0] $end
$var reg      32 5$   mem[143] [31:0] $end
$var reg      32 6$   mem[142] [31:0] $end
$var reg      32 7$   mem[141] [31:0] $end
$var reg      32 8$   mem[140] [31:0] $end
$var reg      32 9$   mem[139] [31:0] $end
$var reg      32 :$   mem[138] [31:0] $end
$var reg      32 ;$   mem[137] [31:0] $end
$var reg      32 <$   mem[136] [31:0] $end
$var reg      32 =$   mem[135] [31:0] $end
$var reg      32 >$   mem[134] [31:0] $end
$var reg      32 ?$   mem[133] [31:0] $end
$var reg      32 @$   mem[132] [31:0] $end
$var reg      32 A$   mem[131] [31:0] $end
$var reg      32 B$   mem[130] [31:0] $end
$var reg      32 C$   mem[129] [31:0] $end
$var reg      32 D$   mem[128] [31:0] $end
$var reg      32 E$   mem[127] [31:0] $end
$var reg      32 F$   mem[126] [31:0] $end
$var reg      32 G$   mem[125] [31:0] $end
$var reg      32 H$   mem[124] [31:0] $end
$var reg      32 I$   mem[123] [31:0] $end
$var reg      32 J$   mem[122] [31:0] $end
$var reg      32 K$   mem[121] [31:0] $end
$var reg      32 L$   mem[120] [31:0] $end
$var reg      32 M$   mem[119] [31:0] $end
$var reg      32 N$   mem[118] [31:0] $end
$var reg      32 O$   mem[117] [31:0] $end
$var reg      32 P$   mem[116] [31:0] $end
$var reg      32 Q$   mem[115] [31:0] $end
$var reg      32 R$   mem[114] [31:0] $end
$var reg      32 S$   mem[113] [31:0] $end
$var reg      32 T$   mem[112] [31:0] $end
$var reg      32 U$   mem[111] [31:0] $end
$var reg      32 V$   mem[110] [31:0] $end
$var reg      32 W$   mem[109] [31:0] $end
$var reg      32 X$   mem[108] [31:0] $end
$var reg      32 Y$   mem[107] [31:0] $end
$var reg      32 Z$   mem[106] [31:0] $end
$var reg      32 [$   mem[105] [31:0] $end
$var reg      32 \$   mem[104] [31:0] $end
$var reg      32 ]$   mem[103] [31:0] $end
$var reg      32 ^$   mem[102] [31:0] $end
$var reg      32 _$   mem[101] [31:0] $end
$var reg      32 `$   mem[100] [31:0] $end
$var reg      32 a$   mem[99] [31:0] $end
$var reg      32 b$   mem[98] [31:0] $end
$var reg      32 c$   mem[97] [31:0] $end
$var reg      32 d$   mem[96] [31:0] $end
$var reg      32 e$   mem[95] [31:0] $end
$var reg      32 f$   mem[94] [31:0] $end
$var reg      32 g$   mem[93] [31:0] $end
$var reg      32 h$   mem[92] [31:0] $end
$var reg      32 i$   mem[91] [31:0] $end
$var reg      32 j$   mem[90] [31:0] $end
$var reg      32 k$   mem[89] [31:0] $end
$var reg      32 l$   mem[88] [31:0] $end
$var reg      32 m$   mem[87] [31:0] $end
$var reg      32 n$   mem[86] [31:0] $end
$var reg      32 o$   mem[85] [31:0] $end
$var reg      32 p$   mem[84] [31:0] $end
$var reg      32 q$   mem[83] [31:0] $end
$var reg      32 r$   mem[82] [31:0] $end
$var reg      32 s$   mem[81] [31:0] $end
$var reg      32 t$   mem[80] [31:0] $end
$var reg      32 u$   mem[79] [31:0] $end
$var reg      32 v$   mem[78] [31:0] $end
$var reg      32 w$   mem[77] [31:0] $end
$var reg      32 x$   mem[76] [31:0] $end
$var reg      32 y$   mem[75] [31:0] $end
$var reg      32 z$   mem[74] [31:0] $end
$var reg      32 {$   mem[73] [31:0] $end
$var reg      32 |$   mem[72] [31:0] $end
$var reg      32 }$   mem[71] [31:0] $end
$var reg      32 ~$   mem[70] [31:0] $end
$var reg      32 !%   mem[69] [31:0] $end
$var reg      32 "%   mem[68] [31:0] $end
$var reg      32 #%   mem[67] [31:0] $end
$var reg      32 $%   mem[66] [31:0] $end
$var reg      32 %%   mem[65] [31:0] $end
$var reg      32 &%   mem[64] [31:0] $end
$var reg      32 '%   mem[63] [31:0] $end
$var reg      32 (%   mem[62] [31:0] $end
$var reg      32 )%   mem[61] [31:0] $end
$var reg      32 *%   mem[60] [31:0] $end
$var reg      32 +%   mem[59] [31:0] $end
$var reg      32 ,%   mem[58] [31:0] $end
$var reg      32 -%   mem[57] [31:0] $end
$var reg      32 .%   mem[56] [31:0] $end
$var reg      32 /%   mem[55] [31:0] $end
$var reg      32 0%   mem[54] [31:0] $end
$var reg      32 1%   mem[53] [31:0] $end
$var reg      32 2%   mem[52] [31:0] $end
$var reg      32 3%   mem[51] [31:0] $end
$var reg      32 4%   mem[50] [31:0] $end
$var reg      32 5%   mem[49] [31:0] $end
$var reg      32 6%   mem[48] [31:0] $end
$var reg      32 7%   mem[47] [31:0] $end
$var reg      32 8%   mem[46] [31:0] $end
$var reg      32 9%   mem[45] [31:0] $end
$var reg      32 :%   mem[44] [31:0] $end
$var reg      32 ;%   mem[43] [31:0] $end
$var reg      32 <%   mem[42] [31:0] $end
$var reg      32 =%   mem[41] [31:0] $end
$var reg      32 >%   mem[40] [31:0] $end
$var reg      32 ?%   mem[39] [31:0] $end
$var reg      32 @%   mem[38] [31:0] $end
$var reg      32 A%   mem[37] [31:0] $end
$var reg      32 B%   mem[36] [31:0] $end
$var reg      32 C%   mem[35] [31:0] $end
$var reg      32 D%   mem[34] [31:0] $end
$var reg      32 E%   mem[33] [31:0] $end
$var reg      32 F%   mem[32] [31:0] $end
$var reg      32 G%   mem[31] [31:0] $end
$var reg      32 H%   mem[30] [31:0] $end
$var reg      32 I%   mem[29] [31:0] $end
$var reg      32 J%   mem[28] [31:0] $end
$var reg      32 K%   mem[27] [31:0] $end
$var reg      32 L%   mem[26] [31:0] $end
$var reg      32 M%   mem[25] [31:0] $end
$var reg      32 N%   mem[24] [31:0] $end
$var reg      32 O%   mem[23] [31:0] $end
$var reg      32 P%   mem[22] [31:0] $end
$var reg      32 Q%   mem[21] [31:0] $end
$var reg      32 R%   mem[20] [31:0] $end
$var reg      32 S%   mem[19] [31:0] $end
$var reg      32 T%   mem[18] [31:0] $end
$var reg      32 U%   mem[17] [31:0] $end
$var reg      32 V%   mem[16] [31:0] $end
$var reg      32 W%   mem[15] [31:0] $end
$var reg      32 X%   mem[14] [31:0] $end
$var reg      32 Y%   mem[13] [31:0] $end
$var reg      32 Z%   mem[12] [31:0] $end
$var reg      32 [%   mem[11] [31:0] $end
$var reg      32 \%   mem[10] [31:0] $end
$var reg      32 ]%   mem[9] [31:0] $end
$var reg      32 ^%   mem[8] [31:0] $end
$var reg      32 _%   mem[7] [31:0] $end
$var reg      32 `%   mem[6] [31:0] $end
$var reg      32 a%   mem[5] [31:0] $end
$var reg      32 b%   mem[4] [31:0] $end
$var reg      32 c%   mem[3] [31:0] $end
$var reg      32 d%   mem[2] [31:0] $end
$var reg      32 e%   mem[1] [31:0] $end
$var reg      32 f%   mem[0] [31:0] $end
$upscope $end


$scope module timer0 $end
$var wire      8 <    addr [7:0] $end
$var wire     32 1    idata [31:0] $end
$var wire     32 6    odata [31:0] $end
$var wire      1 :    cs_  $end
$var wire      1 3    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 g%   count [31:0] $end
$var reg       1 h%   en $end
$var wire      1 i%   clear  $end
$var wire      1 j%   start  $end
$var wire      1 k%   stop  $end
$upscope $end


$scope module timer1 $end
$var wire      8 <    addr [7:0] $end
$var wire     32 1    idata [31:0] $end
$var wire     32 7    odata [31:0] $end
$var wire      1 ;    cs_  $end
$var wire      1 3    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 l%   count [31:0] $end
$var reg       1 m%   en $end
$var wire      1 n%   clear  $end
$var wire      1 o%   start  $end
$var wire      1 p%   stop  $end
$upscope $end

$upscope $end


$scope module busarb0 $end
$var wire      1 )    breq0_  $end
$var wire      1 +    breq1_  $end
$var wire      1 *    bgrt0_  $end
$var wire      1 /    bgrt1_  $end
$var wire      1 !    reset_  $end
$var wire      1 "    clk  $end
$var reg       1 q%   state $end
$upscope $end


$scope module dut0 $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire     32 (    memdata [31:0] $end
$var wire      1 *    bgrt_  $end
$var wire      1 #    memread  $end
$var wire      1 $    memwrite  $end
$var wire     10 &    adr [9:0] $end
$var wire     32 '    writedata [31:0] $end
$var wire      1 )    breq_  $end
$var wire     32 r%   instr [31:0] $end
$var wire      1 s%   zero  $end
$var wire      1 t%   alusrca  $end
$var wire      1 u%   memtoreg  $end
$var wire      1 v%   iord  $end
$var wire      1 w%   pcen  $end
$var wire      1 x%   regwrite  $end
$var wire      1 y%   regdst  $end
$var wire      2 z%   aluop [1:0] $end
$var wire      2 {%   pcsource [1:0] $end
$var wire      2 |%   alusrcb [1:0] $end
$var wire      1 }%   irwrite [3] $end
$var wire      1 ~%   irwrite [2] $end
$var wire      1 !&   irwrite [1] $end
$var wire      1 "&   irwrite [0] $end
$var wire      3 #&   alucont [2:0] $end

$scope module cont $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire      6 $&   op [5:0] $end
$var wire      1 s%   zero  $end
$var wire      1 *    bgrt_  $end
$var reg       1 %&   memread $end
$var reg       1 &&   memwrite $end
$var reg       1 '&   alusrca $end
$var reg       1 (&   memtoreg $end
$var reg       1 )&   iord $end
$var wire      1 w%   pcen  $end
$var reg       1 *&   regwrite $end
$var reg       1 +&   regdst $end
$var reg       2 ,&   pcsource [1:0] $end
$var reg       2 -&   alusrcb [1:0] $end
$var reg       2 .&   aluop [1:0] $end
$var reg       4 /&   irwrite [3:0] $end
$var reg       1 0&   breq_ $end
$var parameter  4 1&   FETCH1 $end
$var parameter  4 2&   SAME_FETCH1 $end
$var parameter  4 3&   SAME_LBRD $end
$var parameter  4 4&   SAME_SBWR $end
$var parameter  4 5&   DECODE $end
$var parameter  4 6&   MEMADR $end
$var parameter  4 7&   LBRD $end
$var parameter  4 8&   LBWR $end
$var parameter  4 9&   SBWR $end
$var parameter  4 :&   RTYPEEX $end
$var parameter  4 ;&   RTYPEWR $end
$var parameter  4 <&   BEQEX $end
$var parameter  4 =&   JEX $end
$var parameter  4 >&   ADDIEX $end
$var parameter  4 ?&   ADDIWR $end
$var parameter  6 @&   LB $end
$var parameter  6 A&   SB $end
$var parameter  6 B&   LW $end
$var parameter  6 C&   SW $end
$var parameter  6 D&   RTYPE $end
$var parameter  6 E&   BEQ $end
$var parameter  6 F&   ADDI $end
$var parameter  6 G&   J $end
$var reg       4 H&   state [3:0] $end
$var reg       4 I&   nextstate [3:0] $end
$var reg       1 J&   pcwrite $end
$var reg       1 K&   pcwritecond $end
$upscope $end


$scope module ac $end
$var wire      2 z%   aluop [1:0] $end
$var wire      6 L&   funct [5:0] $end
$var reg       3 M&   alucont [2:0] $end
$upscope $end


$scope module dp $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire     32 (    memdata [31:0] $end
$var wire      1 t%   alusrca  $end
$var wire      1 u%   memtoreg  $end
$var wire      1 v%   iord  $end
$var wire      1 w%   pcen  $end
$var wire      1 x%   regwrite  $end
$var wire      1 y%   regdst  $end
$var wire      2 {%   pcsource [1:0] $end
$var wire      2 |%   alusrcb [1:0] $end
$var wire      1 }%   irwrite [3] $end
$var wire      1 ~%   irwrite [2] $end
$var wire      1 !&   irwrite [1] $end
$var wire      1 "&   irwrite [0] $end
$var wire      3 #&   alucont [2:0] $end
$var wire      1 s%   zero  $end
$var wire     32 r%   instr [31:0] $end
$var wire     10 &    adr [9:0] $end
$var wire     32 '    writedata [31:0] $end
$var parameter 32 N&   CONST_ZERO $end
$var parameter 32 O&   CONST_ONE $end
$var parameter 32 P&   CONST_FOUR $end
$var wire      3 Q&   ra1 [2:0] $end
$var wire      3 R&   ra2 [2:0] $end
$var wire      3 S&   wa [2:0] $end
$var wire     32 T&   pc [31:0] $end
$var wire     32 U&   nextpc [31:0] $end
$var wire     32 V&   md [31:0] $end
$var wire     32 W&   rd1 [31:0] $end
$var wire     32 X&   rd2 [31:0] $end
$var wire     32 Y&   wd [31:0] $end
$var wire     32 Z&   a [31:0] $end
$var wire     32 [&   src1 [31:0] $end
$var wire     32 \&   src2 [31:0] $end
$var wire     32 ]&   aluresult [31:0] $end
$var wire     32 ^&   aluout [31:0] $end
$var wire     32 _&   constx [31:0] $end
$var wire     32 `&   prev_pc [31:0] $end

$scope module regmux $end
$var parameter 32 a&   WIDTH $end
$var wire      3 b&   d0 [2:0] $end
$var wire      3 c&   d1 [2:0] $end
$var wire      1 y%   s  $end
$var wire      3 S&   y [2:0] $end
$upscope $end


$scope module ir $end
$var parameter 32 d&   WIDTH $end
$var wire      1 "    clk  $end
$var wire      1 }%   en  $end
$var wire     32 (    d [31:0] $end
$var reg      32 e&   q [31:0] $end
$upscope $end


$scope module pcreg $end
$var parameter 32 f&   WIDTH $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire      1 w%   en  $end
$var wire     32 U&   d [31:0] $end
$var reg      32 g&   q [31:0] $end
$upscope $end


$scope module mdr $end
$var parameter 32 h&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 (    d [31:0] $end
$var reg      32 i&   q [31:0] $end
$upscope $end


$scope module areg $end
$var parameter 32 j&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 W&   d [31:0] $end
$var reg      32 k&   q [31:0] $end
$upscope $end


$scope module wrd $end
$var parameter 32 l&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 X&   d [31:0] $end
$var reg      32 m&   q [31:0] $end
$upscope $end


$scope module res $end
$var parameter 32 n&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 ]&   d [31:0] $end
$var reg      32 o&   q [31:0] $end
$upscope $end


$scope module adrmux $end
$var parameter 32 p&   WIDTH $end
$var wire     10 q&   d0 [9:0] $end
$var wire     10 r&   d1 [9:0] $end
$var wire      1 v%   s  $end
$var wire     10 &    y [9:0] $end
$upscope $end


$scope module src1mux $end
$var parameter 32 s&   WIDTH $end
$var wire     32 T&   d0 [31:0] $end
$var wire     32 Z&   d1 [31:0] $end
$var wire      1 t%   s  $end
$var wire     32 [&   y [31:0] $end
$upscope $end


$scope module src2mux $end
$var parameter 32 t&   WIDTH $end
$var wire     32 '    d0 [31:0] $end
$var wire     32 u&   d1 [31:0] $end
$var wire     32 v&   d2 [31:0] $end
$var wire     32 w&   d3 [31:0] $end
$var wire      2 |%   s [1:0] $end
$var reg      32 x&   y [31:0] $end
$upscope $end


$scope module pcmux $end
$var parameter 32 y&   WIDTH $end
$var wire     32 ]&   d0 [31:0] $end
$var wire     32 ^&   d1 [31:0] $end
$var wire     32 _&   d2 [31:0] $end
$var wire     32 z&   d3 [31:0] $end
$var wire      2 {%   s [1:0] $end
$var reg      32 {&   y [31:0] $end
$upscope $end


$scope module wdmux $end
$var parameter 32 |&   WIDTH $end
$var wire     32 ^&   d0 [31:0] $end
$var wire     32 V&   d1 [31:0] $end
$var wire      1 u%   s  $end
$var wire     32 Y&   y [31:0] $end
$upscope $end


$scope module rf $end
$var parameter 32 }&   WIDTH $end
$var parameter 32 ~&   REGBITS $end
$var wire      1 "    clk  $end
$var wire      1 x%   regwrite  $end
$var wire      3 Q&   ra1 [2:0] $end
$var wire      3 R&   ra2 [2:0] $end
$var wire      3 S&   wa [2:0] $end
$var wire     32 Y&   wd [31:0] $end
$var wire     32 W&   rd1 [31:0] $end
$var wire     32 X&   rd2 [31:0] $end
$var reg      32 !'   RAM[7] [31:0] $end
$var reg      32 "'   RAM[6] [31:0] $end
$var reg      32 #'   RAM[5] [31:0] $end
$var reg      32 $'   RAM[4] [31:0] $end
$var reg      32 %'   RAM[3] [31:0] $end
$var reg      32 &'   RAM[2] [31:0] $end
$var reg      32 ''   RAM[1] [31:0] $end
$var reg      32 ('   RAM[0] [31:0] $end
$upscope $end


$scope module alunit $end
$var parameter 32 )'   WIDTH $end
$var wire     32 [&   a [31:0] $end
$var wire     32 \&   b [31:0] $end
$var wire      3 #&   alucont [2:0] $end
$var reg      32 *'   result [31:0] $end
$var wire     32 +'   b2 [31:0] $end
$var wire     32 ,'   sum [31:0] $end
$var wire     32 -'   slt [31:0] $end
$upscope $end


$scope module zd $end
$var parameter 32 .'   WIDTH $end
$var wire     32 ]&   a [31:0] $end
$var wire      1 s%   y  $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b100000 .'
b100000 )'
b11 ~&
b100000 }&
b100000 |&
b100000 y&
b100000 t&
b100000 s&
b1010 p&
b100000 n&
b100000 l&
b100000 j&
b100000 h&
b100000 f&
b100000 d&
b11 a&
b100 P&
b1 O&
b0 N&
b10 G&
b1000 F&
b100 E&
b0 D&
b101011 C&
b100011 B&
b101000 A&
b100000 @&
b1111 ?&
b1110 >&
b1101 =&
b1100 <&
b1011 ;&
b1010 :&
b1001 9&
b1000 8&
b111 7&
b110 6&
b101 5&
b100 4&
b11 3&
b10 2&
b1 1&
0!
0"
x#
x$
x%
bx &
bx '
bx (
x)
x*
z+
x,
bz -
bz .
x/
bx 0
bx 1
bx 2
x3
bx 4
bx 5
b0xxxxxxxxx 6
b0xxxxxxxxx 7
x8
x9
x:
x;
bx <
bx =
bx >
bx ?
bx @
bx A
bx B
bx C
bx D
bx E
bx F
bx G
bx H
bx I
bx J
bx K
bx L
bx M
bx N
bx O
bx P
bx Q
bx R
bx S
bx T
bx U
bx V
bx W
bx X
bx Y
bx Z
bx [
bx \
bx ]
bx ^
bx _
bx `
bx a
bx b
bx c
bx d
bx e
bx f
bx g
bx h
bx i
bx j
bx k
bx l
bx m
bx n
bx o
bx p
bx q
bx r
bx s
bx t
bx u
bx v
bx w
bx x
bx y
bx z
bx {
bx |
bx }
bx ~
bx !!
bx "!
bx #!
bx $!
bx %!
bx &!
bx '!
bx (!
bx )!
bx *!
bx +!
bx ,!
bx -!
bx .!
bx /!
bx 0!
bx 1!
bx 2!
bx 3!
bx 4!
bx 5!
bx 6!
bx 7!
bx 8!
bx 9!
bx :!
bx ;!
bx <!
bx =!
bx >!
bx ?!
bx @!
bx A!
bx B!
bx C!
bx D!
bx E!
bx F!
bx G!
bx H!
bx I!
bx J!
bx K!
bx L!
bx M!
bx N!
bx O!
bx P!
bx Q!
bx R!
bx S!
bx T!
bx U!
bx V!
bx W!
bx X!
bx Y!
bx Z!
bx [!
bx \!
bx ]!
bx ^!
bx _!
bx `!
bx a!
bx b!
bx c!
bx d!
bx e!
bx f!
bx g!
bx h!
bx i!
bx j!
bx k!
bx l!
bx m!
bx n!
bx o!
bx p!
bx q!
bx r!
bx s!
bx t!
bx u!
bx v!
bx w!
bx x!
bx y!
bx z!
bx {!
bx |!
bx }!
bx ~!
bx !"
bx ""
bx #"
bx $"
bx %"
bx &"
bx '"
bx ("
bx )"
bx *"
bx +"
bx ,"
bx -"
bx ."
bx /"
bx 0"
bx 1"
bx 2"
bx 3"
bx 4"
bx 5"
bx 6"
bx 7"
bx 8"
bx 9"
bx :"
bx ;"
bx <"
bx ="
bx >"
bx ?"
bx @"
bx A"
bx B"
bx C"
bx D"
bx E"
bx F"
bx G"
bx H"
bx I"
bx J"
bx K"
bx L"
bx M"
bx N"
bx O"
bx P"
bx Q"
bx R"
bx S"
bx T"
bx U"
bx V"
bx W"
bx X"
bx Y"
bx Z"
bx ["
bx \"
bx ]"
bx ^"
bx _"
bx `"
bx a"
bx b"
bx c"
bx d"
bx e"
bx f"
bx g"
bx h"
bx i"
bx j"
bx k"
bx l"
bx m"
b1100 n"
b101 o"
b11 p"
b10101100000001110000000000010100 q"
b10001100000001110000000000000000 r"
b1000000000000000000000001111 s"
b111000100011100000100010 t"
b110001010011100000100000 u"
b111000100011000000101010 v"
b10001100000001010000000000000000 w"
b10000110000000000000000000001 x"
b11001000011000000101010 y"
b10000101001110000000000001000 z"
b101001000010100000100000 {"
b11001000010100000100100 |"
b111000100010000000100101 }"
b10001100000000110000000000010010 ~"
b10001100000001110000000000010000 !#
b10001100000000100000000000010001 "#
bx ##
bx $#
bx %#
bx &#
bx '#
bx (#
bx )#
bx *#
bx +#
bx ,#
bx -#
bx .#
bx /#
bx 0#
bx 1#
bx 2#
bx 3#
bx 4#
bx 5#
bx 6#
bx 7#
bx 8#
bx 9#
bx :#
bx ;#
bx <#
bx =#
bx >#
bx ?#
bx @#
bx A#
bx B#
bx C#
bx D#
bx E#
bx F#
bx G#
bx H#
bx I#
bx J#
bx K#
bx L#
bx M#
bx N#
bx O#
bx P#
bx Q#
bx R#
bx S#
bx T#
bx U#
bx V#
bx W#
bx X#
bx Y#
bx Z#
bx [#
bx \#
bx ]#
bx ^#
bx _#
bx `#
bx a#
bx b#
bx c#
bx d#
bx e#
bx f#
bx g#
bx h#
bx i#
bx j#
bx k#
bx l#
bx m#
bx n#
bx o#
bx p#
bx q#
bx r#
bx s#
bx t#
bx u#
bx v#
bx w#
bx x#
bx y#
bx z#
bx {#
bx |#
bx }#
bx ~#
bx !$
bx "$
bx #$
bx $$
bx %$
bx &$
bx '$
bx ($
bx )$
bx *$
bx +$
bx ,$
bx -$
bx .$
bx /$
bx 0$
bx 1$
bx 2$
bx 3$
bx 4$
bx 5$
bx 6$
bx 7$
bx 8$
bx 9$
bx :$
bx ;$
bx <$
bx =$
bx >$
bx ?$
bx @$
bx A$
bx B$
bx C$
bx D$
bx E$
bx F$
bx G$
bx H$
bx I$
bx J$
bx K$
bx L$
bx M$
bx N$
bx O$
bx P$
bx Q$
bx R$
bx S$
bx T$
bx U$
bx V$
bx W$
bx X$
bx Y$
bx Z$
bx [$
bx \$
bx ]$
bx ^$
bx _$
bx `$
bx a$
bx b$
bx c$
bx d$
bx e$
bx f$
bx g$
bx h$
bx i$
bx j$
bx k$
bx l$
bx m$
bx n$
bx o$
bx p$
bx q$
bx r$
bx s$
bx t$
bx u$
bx v$
bx w$
bx x$
bx y$
bx z$
bx {$
bx |$
bx }$
bx ~$
bx !%
bx "%
bx #%
bx $%
bx %%
bx &%
bx '%
bx (%
bx )%
bx *%
bx +%
bx ,%
bx -%
bx .%
bx /%
bx 0%
bx 1%
bx 2%
bx 3%
bx 4%
bx 5%
bx 6%
bx 7%
bx 8%
bx 9%
bx :%
bx ;%
bx <%
bx =%
bx >%
bx ?%
bx @%
bx A%
bx B%
bx C%
bx D%
bx E%
bx F%
bx G%
bx H%
bx I%
bx J%
bx K%
bx L%
bx M%
bx N%
bx O%
bx P%
bx Q%
bx R%
bx S%
bx T%
bx U%
bx V%
bx W%
bx X%
bx Y%
bx Z%
bx [%
bx \%
bx ]%
bx ^%
bx _%
bx `%
bx a%
bx b%
bx c%
bx d%
bx e%
bx f%
bx g%
xh%
xi%
xj%
xk%
bx l%
xm%
xn%
xo%
xp%
xq%
bx r%
xs%
xt%
xu%
xv%
xw%
xx%
xy%
bx z%
bx {%
bx |%
x}%
x~%
x!&
x"&
bx #&
bx $&
x%&
x&&
x'&
x(&
x)&
x*&
x+&
bx ,&
bx -&
bx .&
bx /&
x0&
bx H&
bx I&
xJ&
xK&
bx L&
bx M&
bx Q&
bx R&
bx S&
bx T&
bx U&
bx V&
bx W&
bx X&
bx Y&
bx Z&
bx [&
bx \&
bx ]&
bx ^&
b0xxxxxxxxxxxxxxxx _&
bz `&
bx b&
bx c&
bx e&
bx g&
bx i&
bx k&
bx m&
bx o&
bx q&
bx r&
b1 u&
bx v&
bx w&
bx x&
b0 z&
bx {&
bx !'
bx "'
bx #'
bx $'
bx %'
bx &'
bx ''
bx ('
bx *'
bx +'
bx ,'
b0x -'
$end
#500
1"
b0 g&
b1 H&
0q%
1/
0*
b0 T&
b0 q&
b101 I&
b1000 /&
1J&
0K&
0*&
0+&
1%&
0&&
0'&
b1 -&
b0 .&
b0 ,&
0)&
0(&
00&
1w%
0)
0u%
0v%
b0 {%
b0 z%
b1 |%
0t%
0$
1#
0y%
0x%
1}%
0~%
0!&
0"&
1%
13
b0 [&
b0 &
b0 0
0k%
0j%
0i%
0p%
0o%
0n%
b0 <
1;
1:
19
08
b10001100000000100000000000010001 4
b0 5
b0 6
b0 7
b10001100000000100000000000010001 2
b10001100000000100000000000010001 (
b10 M&
b1 x&
b1 \&
b10 #&
b1 +'
b1 ,'
b0 -'
b1 *'
b1 ]&
0s%
b1 {&
b1 U&
#1000
0"
#1500
1"
1!
b1 o&
b10001100000000100000000000010001 i&
b1 g&
b10001100000000100000000000010001 e&
b101 H&
b10001100000000100000000000010001 r%
b1 T&
b10001100000000100000000000010001 V&
b1 ^&
b1 r&
b1 Y&
b1 q&
b1 [&
b10001 L&
b100011 $&
b10001 v&
b0 c&
b10 b&
b10 R&
b0 Q&
b10001 _&
b10001 w&
b0 W&
b10 S&
b10 ,'
b1 &
b1 0
b1 <
b10001100000001110000000000010000 4
b10001100000001110000000000010000 2
b10001100000001110000000000010000 (
b110 I&
b0 /&
0J&
0%&
b11 -&
10&
b10 *'
0w%
b10 ]&
1)
b11 |%
0#
0}%
b10 {&
b10001 x&
b10001 \&
b10 U&
b10001 +'
b10010 ,'
b10010 *'
b10010 ]&
b10010 {&
b10010 U&
#2000
0"
#2500
1"
b10010 o&
b0 k&
b10001100000001110000000000010000 i&
b110 H&
b10001100000001110000000000010000 V&
b0 Z&
b10010 ^&
b10010 r&
b10010 Y&
b111 I&
b10 -&
1'&
1t%
b10 |%
b0 [&
b10001 ,'
b10001 *'
b10001 ]&
b10001 {&
b10001 U&
#3000
0"
#3500
1"
b10001 o&
b111 H&
b10001 ^&
b10001 r&
b10001 Y&
b1000 I&
0'&
b0 -&
1%&
1)&
00&
0)
1v%
1#
b0 |%
0t%
b1 [&
b10001 &
b10001 0
b10010 ,'
b10001 <
b101 4
b101 2
b101 (
bx x&
b10010 *'
b10010 ]&
bx \&
bx +'
bx ,'
b0x -'
b10010 {&
bx *'
bx ]&
b10010 U&
xs%
bx {&
bx U&
#4000
0"
#4500
1"
bx o&
b101 i&
b1000 H&
b101 V&
bx ^&
bx r&
bx Y&
bx &
bx 0
bx <
x;
x:
x9
x8
b0x0x 2
bx 4
bx 5
b0xxxxxxxxx 6
b0xxxxxxxxx 7
bx 2
b0x0x (
bx (
b1 I&
0%&
0)&
10&
1*&
1(&
1u%
1x%
1)
0v%
0#
b1 &
b101 Y&
b1 0
b1 <
1;
1:
19
08
b10001100000001110000000000010000 4
b0 5
b0 6
b0 7
b10001100000001110000000000010000 2
b10001100000001110000000000010000 (
#5000
0"
#5500
1"
b101 &'
b10001100000001110000000000010000 i&
b1 H&
b101 X&
b10001100000001110000000000010000 V&
b10001100000001110000000000010000 Y&
b101 I&
0*&
0(&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0u%
0x%
bx Y&
b1 x&
b1 \&
b1 +'
b10 ,'
b0 -'
b10 *'
b10 ]&
0s%
b10 {&
b10 U&
#6000
0"
#6500
1"
b10 o&
b101 m&
b10 g&
b10001100000001110000000000010000 e&
b101 H&
b10001100000001110000000000010000 r%
b10 T&
b101 '
b10 ^&
b10 r&
b10 Y&
b101 1
b10 q&
b10 [&
b10000 L&
b10000 v&
b111 b&
b111 R&
b10000 _&
b10000 w&
bx X&
b111 S&
b11 ,'
b10 &
b10 0
b10 <
b10001100000000110000000000010010 4
b10001100000000110000000000010010 2
b10001100000000110000000000010010 (
b110 I&
b0 /&
0J&
0%&
b11 -&
10&
b11 *'
0w%
b11 ]&
1)
b11 |%
0#
0}%
b11 {&
b10000 x&
b10000 \&
b11 U&
b10000 +'
b10010 ,'
b10010 *'
b10010 ]&
b10010 {&
b10010 U&
#7000
0"
#7500
1"
b10010 o&
bx m&
b10001100000000110000000000010010 i&
b110 H&
b10001100000000110000000000010010 V&
bx '
b10010 ^&
b10010 r&
bx 1
b10010 Y&
b111 I&
b10 -&
1'&
1t%
b10 |%
b0 [&
b10000 ,'
b10000 *'
b10000 ]&
b10000 {&
b10000 U&
#8000
0"
#8500
1"
b10000 o&
b111 H&
b10000 ^&
b10000 r&
b10000 Y&
b1000 I&
0'&
b0 -&
1%&
1)&
00&
0)
1v%
1#
b0 |%
0t%
b10 [&
b10000 &
b10000 0
b10010 ,'
b10000 <
b11 4
b11 2
b11 (
bx x&
b10010 *'
b10010 ]&
bx \&
bx +'
bx ,'
b0x -'
b10010 {&
bx *'
bx ]&
b10010 U&
xs%
bx {&
bx U&
#9000
0"
#9500
1"
bx o&
b11 i&
b1000 H&
b11 V&
bx ^&
bx r&
bx Y&
bx &
bx 0
bx <
x;
x:
x9
x8
b0xx 2
bx 4
bx 5
b0xxxxxxxxx 6
b0xxxxxxxxx 7
bx 2
b0xx (
bx (
b1 I&
0%&
0)&
10&
1*&
1(&
1u%
1x%
1)
0v%
0#
b10 &
b11 Y&
b10 0
b10 <
1;
1:
19
08
b10001100000000110000000000010010 4
b0 5
b0 6
b0 7
b10001100000000110000000000010010 2
b10001100000000110000000000010010 (
#10000
0"
#10500
1"
b11 !'
b10001100000000110000000000010010 i&
b1 H&
b11 X&
b10001100000000110000000000010010 V&
b10001100000000110000000000010010 Y&
b101 I&
0*&
0(&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0u%
0x%
bx Y&
b1 x&
b1 \&
b1 +'
b11 ,'
b0 -'
b11 *'
b11 ]&
0s%
b11 {&
b11 U&
#11000
0"
#11500
1"
b11 o&
b11 m&
b11 g&
b10001100000000110000000000010010 e&
b101 H&
b10001100000000110000000000010010 r%
b11 T&
b11 '
b11 ^&
b11 r&
b11 Y&
b11 1
b11 q&
b11 [&
b10010 L&
b10010 v&
b11 b&
b11 R&
b10010 _&
b10010 w&
bx X&
b11 S&
b100 ,'
b11 &
b11 0
b11 <
b111000100010000000100101 4
b111000100010000000100101 2
b111000100010000000100101 (
b110 I&
b0 /&
0J&
0%&
b11 -&
10&
b100 *'
0w%
b100 ]&
1)
b11 |%
0#
0}%
b100 {&
b10010 x&
b10010 \&
b100 U&
b10010 +'
b10101 ,'
b10101 *'
b10101 ]&
b10101 {&
b10101 U&
#12000
0"
#12500
1"
b10101 o&
bx m&
b111000100010000000100101 i&
b110 H&
b111000100010000000100101 V&
bx '
b10101 ^&
b10101 r&
bx 1
b10101 Y&
b111 I&
b10 -&
1'&
1t%
b10 |%
b0 [&
b10010 ,'
b10010 *'
b10010 ]&
b10010 {&
b10010 U&
#13000
0"
#13500
1"
b10010 o&
b111 H&
b10010 ^&
b10010 r&
b10010 Y&
b1000 I&
0'&
b0 -&
1%&
1)&
00&
0)
1v%
1#
b0 |%
0t%
b11 [&
b10010 &
b10010 0
b10101 ,'
b10010 <
b1100 4
b1100 2
b1100 (
bx x&
b10101 *'
b10101 ]&
bx \&
bx +'
bx ,'
b0x -'
b10101 {&
bx *'
bx ]&
b10101 U&
xs%
bx {&
bx U&
#14000
0"
#14500
1"
bx o&
b1100 i&
b1000 H&
b1100 V&
bx ^&
bx r&
bx Y&
bx &
bx 0
bx <
x;
x:
x9
x8
b0xx00 2
bx 4
bx 5
b0xxxxxxxxx 6
b0xxxxxxxxx 7
bx 2
b0xx00 (
bx (
b1 I&
0%&
0)&
10&
1*&
1(&
1u%
1x%
1)
0v%
0#
b11 &
b1100 Y&
b11 0
b11 <
1;
1:
19
08
b111000100010000000100101 4
b0 5
b0 6
b0 7
b111000100010000000100101 2
b111000100010000000100101 (
#15000
0"
#15500
1"
b1100 %'
b111000100010000000100101 i&
b1 H&
b1100 X&
b111000100010000000100101 V&
b111000100010000000100101 Y&
b101 I&
0*&
0(&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0u%
0x%
bx Y&
b1 x&
b1 \&
b1 +'
b100 ,'
b0 -'
b100 *'
b100 ]&
0s%
b100 {&
b100 U&
#16000
0"
#16500
1"
b100 o&
b1100 m&
b100 g&
b111000100010000000100101 e&
b101 H&
b111000100010000000100101 r%
b100 T&
b1100 '
b100 ^&
b100 r&
b100 Y&
b1100 1
b100 q&
b100 [&
b100101 L&
b0 $&
b10000000100101 v&
b100 c&
b10 b&
b10 R&
b111 Q&
b10000000100101 _&
b10000000100101 w&
b11 W&
b101 X&
b10 S&
b101 ,'
b100 &
b100 0
b100 <
b11001000010100000100100 4
b11001000010100000100100 2
b11001000010100000100100 (
b1010 I&
b0 /&
0J&
0%&
b11 -&
10&
b101 *'
0w%
b101 ]&
1)
b11 |%
0#
0}%
b101 {&
b10000000100101 x&
b10000000100101 \&
b101 U&
b10000000100101 +'
b10000000101001 ,'
b10000000101001 *'
b10000000101001 ]&
b10000000101001 {&
b10000000101001 U&
#17000
0"
#17500
1"
b10000000101001 o&
b101 m&
b11 k&
b11001000010100000100100 i&
b1010 H&
b11001000010100000100100 V&
b11 Z&
b101 '
b10000000101001 ^&
b101001 r&
b101 1
b10000000101001 Y&
b1011 I&
b0 -&
1'&
b10 .&
b10 z%
1t%
b0 |%
b11 [&
b10000000101000 ,'
b1 M&
b101 x&
b10000000101000 *'
b10000000101000 ]&
b101 \&
b1 #&
b101 +'
b1000 ,'
b10000000101000 {&
b111 *'
b111 ]&
b10000000101000 U&
b111 {&
b111 U&
#18000
0"
#18500
1"
b111 o&
b1011 H&
b111 ^&
b111 r&
b111 Y&
b1 I&
0'&
b0 .&
1+&
1*&
1x%
1y%
b0 z%
0t%
b100 [&
b100 S&
b1001 ,'
b10 M&
b101 *'
b101 ]&
b10 #&
b101 {&
b1001 *'
b1001 ]&
b101 U&
b1001 {&
b1001 U&
#19000
0"
#19500
1"
b111 $'
b1001 o&
b1 H&
b1001 ^&
b1001 r&
b1001 Y&
b101 I&
0*&
0+&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0y%
0x%
b10 S&
b1 x&
b1 \&
b1 +'
b101 ,'
b101 *'
b101 ]&
b101 {&
b101 U&
#20000
0"
#20500
1"
b101 o&
b101 g&
b11001000010100000100100 e&
b101 H&
b11001000010100000100100 r%
b101 T&
b101 ^&
b101 r&
b101 Y&
b101 q&
b101 [&
b100100 L&
b10100000100100 v&
b101 c&
b100 b&
b100 R&
b11 Q&
b10100000100100 _&
b10100000100100 w&
b1100 W&
b111 X&
b100 S&
b110 ,'
b101 &
b101 0
b101 <
b101001000010100000100000 4
b101001000010100000100000 2
b101001000010100000100000 (
b1010 I&
b0 /&
0J&
0%&
b11 -&
10&
b110 *'
0w%
b110 ]&
1)
b11 |%
0#
0}%
b110 {&
b10100000100100 x&
b10100000100100 \&
b110 U&
b10100000100100 +'
b10100000101001 ,'
b10100000101001 *'
b10100000101001 ]&
b10100000101001 {&
b10100000101001 U&
#21000
0"
#21500
1"
b10100000101001 o&
b111 m&
b1100 k&
b101001000010100000100000 i&
b1010 H&
b101001000010100000100000 V&
b1100 Z&
b111 '
b10100000101001 ^&
b101001 r&
b111 1
b10100000101001 Y&
b1011 I&
b0 -&
1'&
b10 .&
b10 z%
1t%
b0 |%
b1100 [&
b10100000110000 ,'
b0 M&
b111 x&
b10100000110000 *'
b10100000110000 ]&
b111 \&
b0 #&
b111 +'
b10011 ,'
b10100000110000 {&
b100 *'
b100 ]&
b10100000110000 U&
b100 {&
b100 U&
#22000
0"
#22500
1"
b100 o&
b1011 H&
b100 ^&
b100 r&
b100 Y&
b1 I&
0'&
b0 .&
1+&
1*&
1x%
1y%
b0 z%
0t%
b101 [&
b101 S&
b1100 ,'
b10 M&
b101 *'
b101 ]&
b10 #&
b101 {&
b1100 *'
b1100 ]&
b101 U&
b1100 {&
b1100 U&
#23000
0"
#23500
1"
b100 #'
b1100 o&
b1 H&
b1100 ^&
b1100 r&
b1100 Y&
b101 I&
0*&
0+&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0y%
0x%
b100 S&
b1 x&
b1 \&
b1 +'
b110 ,'
b110 *'
b110 ]&
b110 {&
b110 U&
#24000
0"
#24500
1"
b110 o&
b110 g&
b101001000010100000100000 e&
b101 H&
b101001000010100000100000 r%
b110 T&
b110 ^&
b110 r&
b110 Y&
b110 q&
b110 [&
b100000 L&
b10100000100000 v&
b101 Q&
b10100000100000 _&
b10100000100000 w&
b100 W&
b111 ,'
b110 &
b110 0
b110 <
b10000101001110000000000001000 4
b10000101001110000000000001000 2
b10000101001110000000000001000 (
b1010 I&
b0 /&
0J&
0%&
b11 -&
10&
b111 *'
0w%
b111 ]&
1)
b11 |%
0#
0}%
b111 {&
b10100000100000 x&
b10100000100000 \&
b111 U&
b10100000100000 +'
b10100000100110 ,'
b10100000100110 *'
b10100000100110 ]&
b10100000100110 {&
b10100000100110 U&
#25000
0"
#25500
1"
b10100000100110 o&
b100 k&
b10000101001110000000000001000 i&
b1010 H&
b10000101001110000000000001000 V&
b100 Z&
b10100000100110 ^&
b100110 r&
b10100000100110 Y&
b1011 I&
b0 -&
1'&
b10 .&
b10 z%
1t%
b0 |%
b100 [&
b10100000100100 ,'
b111 x&
b10100000100100 *'
b10100000100100 ]&
b111 \&
b111 +'
b1011 ,'
b10100000100100 {&
b1011 *'
b1011 ]&
b10100000100100 U&
b1011 {&
b1011 U&
#26000
0"
#26500
1"
b1011 o&
b1011 H&
b1011 ^&
b1011 r&
b1011 Y&
b1 I&
0'&
b0 .&
1+&
1*&
1x%
1y%
b0 z%
0t%
b110 [&
b101 S&
b1101 ,'
b1101 *'
b1101 ]&
b1101 {&
b1101 U&
#27000
0"
#27500
1"
b1011 #'
b1101 o&
b1 H&
b1011 W&
b1101 ^&
b1101 r&
b1101 Y&
b101 I&
0*&
0+&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0y%
0x%
b100 S&
b1 x&
b1 \&
b1 +'
b111 ,'
b111 *'
b111 ]&
b111 {&
b111 U&
#28000
0"
#28500
1"
b111 o&
b1011 k&
b111 g&
b10000101001110000000000001000 e&
b101 H&
b10000101001110000000000001000 r%
b111 T&
b1011 Z&
b111 ^&
b111 r&
b111 Y&
b111 q&
b111 [&
b1000 L&
b100 $&
b1000 v&
b0 c&
b111 b&
b111 R&
b1000 _&
b1000 w&
b11 X&
b111 S&
b1000 ,'
b111 &
b111 0
b111 <
b11001000011000000101010 4
b11001000011000000101010 2
b11001000011000000101010 (
b1100 I&
b0 /&
0J&
0%&
b11 -&
10&
b1000 *'
0w%
b1000 ]&
1)
b11 |%
0#
0}%
b1000 {&
b1000 x&
b1000 \&
b1000 U&
b1000 +'
b1111 ,'
b1111 *'
b1111 ]&
b1111 {&
b1111 U&
#29000
0"
#29500
1"
b1111 o&
b11 m&
b11001000011000000101010 i&
b1100 H&
b11001000011000000101010 V&
b11 '
b1111 ^&
b1111 r&
b11 1
b1111 Y&
b1 I&
b0 -&
1'&
b1 .&
1K&
b1 ,&
b1 {%
b1 z%
1t%
b0 |%
b1011 [&
b10011 ,'
b110 M&
b11 x&
b10011 *'
b10011 ]&
b11 \&
b110 #&
b10100 ,'
b11111111111111111111111111111100 +'
b1000 ,'
b1000 *'
b1000 ]&
#30000
0"
#30500
1"
b1000 o&
b1 H&
b1000 ^&
b1000 r&
b1000 Y&
b101 I&
0K&
0'&
b0 .&
b0 ,&
1%&
b1000 /&
b1 -&
1J&
00&
b1000 {&
1w%
b1000 U&
0)
b1 |%
1}%
1#
b0 {%
b0 z%
0t%
b111 [&
b100 ,'
b1 x&
b10 M&
b100 *'
b100 ]&
b10 #&
b1 \&
b1 +'
b11 ,'
b1000 ,'
b100 {&
b1000 *'
b1000 ]&
b100 U&
b1000 {&
b1000 U&
#31000
0"
#31500
1"
b1000 g&
b11001000011000000101010 e&
b101 H&
b11001000011000000101010 r%
b1000 T&
b1000 q&
b1000 [&
b101010 L&
b0 $&
b11000000101010 v&
b110 c&
b100 b&
b100 R&
b11 Q&
b11000000101010 _&
b11000000101010 w&
b1100 W&
b111 X&
b100 S&
b1001 ,'
b1000 &
b1000 0
b1000 <
b10000110000000000000000000001 4
b10000110000000000000000000001 2
b10000110000000000000000000001 (
b1010 I&
b0 /&
0J&
0%&
b11 -&
10&
b1001 *'
0w%
b1001 ]&
1)
b11 |%
0#
0}%
b1001 {&
b11000000101010 x&
b11000000101010 \&
b1001 U&
b11000000101010 +'
b11000000110010 ,'
b11000000110010 *'
b11000000110010 ]&
b11000000110010 {&
b11000000110010 U&
#32000
0"
#32500
1"
b11000000110010 o&
b111 m&
b1100 k&
b10000110000000000000000000001 i&
b1010 H&
b10000110000000000000000000001 V&
b1100 Z&
b111 '
b11000000110010 ^&
b110010 r&
b111 1
b11000000110010 Y&
b1011 I&
b0 -&
1'&
b10 .&
b10 z%
1t%
b0 |%
b1100 [&
b11000000110110 ,'
b111 M&
b111 x&
b11000000110110 *'
b11000000110110 ]&
b111 \&
b111 #&
b11000000110111 ,'
b11111111111111111111111111111000 +'
b101 ,'
b11000000110110 {&
b0 *'
b0 ]&
b11000000110110 U&
1s%
b0 {&
b0 U&
#33000
0"
#33500
1"
b0 o&
b1011 H&
b0 ^&
b0 r&
b0 Y&
b1 I&
0'&
b0 .&
1+&
1*&
1x%
1y%
b0 z%
0t%
b1000 [&
b110 S&
b1 ,'
b10 M&
b10 #&
b111 +'
b0 ,'
b1111 ,'
b1111 *'
b1111 ]&
0s%
b1111 {&
b1111 U&
#34000
0"
#34500
1"
b0 "'
b1111 o&
b1 H&
b1111 ^&
b1111 r&
b1111 Y&
b101 I&
0*&
0+&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0y%
0x%
b100 S&
b1 x&
b1 \&
b1 +'
b1001 ,'
b1001 *'
b1001 ]&
b1001 {&
b1001 U&
#35000
0"
#35500
1"
b1001 o&
b1001 g&
b10000110000000000000000000001 e&
b101 H&
b10000110000000000000000000001 r%
b1001 T&
b1001 ^&
b1001 r&
b1001 Y&
b1001 q&
b1001 [&
b1 L&
b100 $&
b1 v&
b0 c&
b0 b&
b0 R&
b110 Q&
b1 _&
b1 w&
b0 W&
b0 X&
b0 S&
b1010 ,'
b1001 &
b1001 0
b1001 <
b10001100000001010000000000000000 4
b10001100000001010000000000000000 2
b10001100000001010000000000000000 (
b1100 I&
b0 /&
0J&
0%&
b11 -&
10&
b1010 *'
0w%
b1010 ]&
1)
b11 |%
0#
0}%
b1010 {&
b1010 U&
#36000
0"
#36500
1"
b1010 o&
b0 m&
b0 k&
b10001100000001010000000000000000 i&
b1100 H&
b10001100000001010000000000000000 V&
b0 Z&
b0 '
b1010 ^&
b1010 r&
b0 1
b1010 Y&
b1 I&
b0 -&
1'&
b1 .&
1K&
b1 ,&
b1 {%
b1 z%
1t%
b0 |%
b0 [&
b1 ,'
b110 M&
b0 x&
b1 *'
b1 ]&
b0 \&
b110 #&
b10 ,'
b11111111111111111111111111111111 +'
b0 ,'
b0 *'
b0 ]&
1s%
1w%
#37000
0"
#37500
1"
b0 o&
b1010 g&
b1 H&
b1010 T&
b0 ^&
b0 r&
b0 Y&
b1010 q&
b1010 &
b1010 0
b1010 <
b111000100011000000101010 4
b111000100011000000101010 2
b111000100011000000101010 (
b101 I&
0K&
0'&
b0 .&
b0 ,&
1%&
b1000 /&
b1 -&
1J&
00&
b0 {&
b0 U&
0)
b1 |%
1}%
1#
b0 {%
b0 z%
0t%
b1010 [&
b1010 ,'
b1 x&
b10 M&
b1010 *'
b1010 ]&
b10 #&
b1 \&
b1 +'
b1001 ,'
0s%
b1011 ,'
b1010 {&
b1011 *'
b1011 ]&
b1010 U&
b1011 {&
b1011 U&
#38000
0"
#38500
1"
b1011 o&
b111000100011000000101010 i&
b1011 g&
b111000100011000000101010 e&
b101 H&
b111000100011000000101010 r%
b1011 T&
b111000100011000000101010 V&
b1011 ^&
b1011 r&
b1011 Y&
b1011 q&
b1011 [&
b101010 L&
b0 $&
b11000000101010 v&
b110 c&
b10 b&
b10 R&
b111 Q&
b11000000101010 _&
b11000000101010 w&
b11 W&
b101 X&
b10 S&
b1100 ,'
b1011 &
b1011 0
b1011 <
b110001010011100000100000 4
b110001010011100000100000 2
b110001010011100000100000 (
b1010 I&
b0 /&
0J&
0%&
b11 -&
10&
b1100 *'
0w%
b1100 ]&
1)
b11 |%
0#
0}%
b1100 {&
b11000000101010 x&
b11000000101010 \&
b1100 U&
b11000000101010 +'
b11000000110101 ,'
b11000000110101 *'
b11000000110101 ]&
b11000000110101 {&
b11000000110101 U&
#39000
0"
#39500
1"
b11000000110101 o&
b101 m&
b11 k&
b110001010011100000100000 i&
b1010 H&
b110001010011100000100000 V&
b11 Z&
b101 '
b11000000110101 ^&
b110101 r&
b101 1
b11000000110101 Y&
b1011 I&
b0 -&
1'&
b10 .&
b10 z%
1t%
b0 |%
b11 [&
b11000000101101 ,'
b111 M&
b101 x&
b11000000101101 *'
b11000000101101 ]&
b101 \&
b111 #&
b11000000101110 ,'
b11111111111111111111111111111010 +'
b11111111111111111111111111111110 ,'
b1 -'
b11000000101101 {&
b1 *'
b1 ]&
b11000000101101 U&
b1 {&
b1 U&
#40000
0"
#40500
1"
b1 o&
b1011 H&
b1 ^&
b1 r&
b1 Y&
b1 I&
0'&
b0 .&
1+&
1*&
1x%
1y%
b0 z%
0t%
b1011 [&
b110 S&
b110 ,'
b0 -'
b10 M&
b0 *'
b0 ]&
b10 #&
b101 +'
b101 ,'
1s%
b10000 ,'
b0 {&
b10000 *'
b10000 ]&
b0 U&
0s%
b10000 {&
b10000 U&
#41000
0"
#41500
1"
b1 "'
b10000 o&
b1 H&
b10000 ^&
b10000 r&
b10000 Y&
b101 I&
0*&
0+&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0y%
0x%
b10 S&
b1 x&
b1 \&
b1 +'
b1100 ,'
b1100 *'
b1100 ]&
b1100 {&
b1100 U&
#42000
0"
#42500
1"
b1100 o&
b1100 g&
b110001010011100000100000 e&
b101 H&
b110001010011100000100000 r%
b1100 T&
b1100 ^&
b1100 r&
b1100 Y&
b1100 q&
b1100 [&
b100000 L&
b11100000100000 v&
b111 c&
b101 b&
b101 R&
b110 Q&
b11100000100000 _&
b11100000100000 w&
b1 W&
b1011 X&
b101 S&
b1101 ,'
b1100 &
b1100 0
b1100 <
b111000100011100000100010 4
b111000100011100000100010 2
b111000100011100000100010 (
b1010 I&
b0 /&
0J&
0%&
b11 -&
10&
b1101 *'
0w%
b1101 ]&
1)
b11 |%
0#
0}%
b1101 {&
b11100000100000 x&
b11100000100000 \&
b1101 U&
b11100000100000 +'
b11100000101100 ,'
b11100000101100 *'
b11100000101100 ]&
b11100000101100 {&
b11100000101100 U&
#43000
0"
#43500
1"
b11100000101100 o&
b1011 m&
b1 k&
b111000100011100000100010 i&
b1010 H&
b111000100011100000100010 V&
b1 Z&
b1011 '
b11100000101100 ^&
b101100 r&
b1011 1
b11100000101100 Y&
b1011 I&
b0 -&
1'&
b10 .&
b10 z%
1t%
b0 |%
b1 [&
b11100000100001 ,'
b1011 x&
b11100000100001 *'
b11100000100001 ]&
b1011 \&
b1011 +'
b1100 ,'
b11100000100001 {&
b1100 *'
b1100 ]&
b11100000100001 U&
b1100 {&
b1100 U&
#44000
0"
#44500
1"
b1100 o&
b1011 H&
b1100 ^&
b1100 r&
b1100 Y&
b1 I&
0'&
b0 .&
1+&
1*&
1x%
1y%
b0 z%
0t%
b1100 [&
b111 S&
b10111 ,'
b10111 *'
b10111 ]&
b10111 {&
b10111 U&
#45000
0"
#45500
1"
b1100 !'
b10111 o&
b1 H&
b10111 ^&
b10111 r&
b10111 Y&
b101 I&
0*&
0+&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0y%
0x%
b101 S&
b1 x&
b1 \&
b1 +'
b1101 ,'
b1101 *'
b1101 ]&
b1101 {&
b1101 U&
#46000
0"
#46500
1"
b1101 o&
b1101 g&
b111000100011100000100010 e&
b101 H&
b111000100011100000100010 r%
b1101 T&
b1101 ^&
b1101 r&
b1101 Y&
b1101 q&
b1101 [&
b100010 L&
b11100000100010 v&
b10 b&
b10 R&
b111 Q&
b11100000100010 _&
b11100000100010 w&
b1100 W&
b101 X&
b10 S&
b1110 ,'
b1101 &
b1101 0
b1101 <
b1000000000000000000000001111 4
b1000000000000000000000001111 2
b1000000000000000000000001111 (
b1010 I&
b0 /&
0J&
0%&
b11 -&
10&
b1110 *'
0w%
b1110 ]&
1)
b11 |%
0#
0}%
b1110 {&
b11100000100010 x&
b11100000100010 \&
b1110 U&
b11100000100010 +'
b11100000101111 ,'
b11100000101111 *'
b11100000101111 ]&
b11100000101111 {&
b11100000101111 U&
#47000
0"
#47500
1"
b11100000101111 o&
b101 m&
b1100 k&
b1000000000000000000000001111 i&
b1010 H&
b1000000000000000000000001111 V&
b1100 Z&
b101 '
b11100000101111 ^&
b101111 r&
b101 1
b11100000101111 Y&
b1011 I&
b0 -&
1'&
b10 .&
b10 z%
1t%
b0 |%
b1100 [&
b11100000101110 ,'
b110 M&
b101 x&
b11100000101110 *'
b11100000101110 ]&
b101 \&
b110 #&
b11100000101111 ,'
b11111111111111111111111111111010 +'
b111 ,'
b11100000101110 {&
b111 *'
b111 ]&
b11100000101110 U&
b111 {&
b111 U&
#48000
0"
#48500
1"
b111 o&
b1011 H&
b111 ^&
b111 r&
b111 Y&
b1 I&
0'&
b0 .&
1+&
1*&
1x%
1y%
b0 z%
0t%
b1101 [&
b111 S&
b1000 ,'
b10 M&
b1000 *'
b1000 ]&
b10 #&
b101 +'
b111 ,'
b10010 ,'
b1000 {&
b10010 *'
b10010 ]&
b1000 U&
b10010 {&
b10010 U&
#49000
0"
#49500
1"
b111 !'
b10010 o&
b1 H&
b111 W&
b10010 ^&
b10010 r&
b10010 Y&
b101 I&
0*&
0+&
1%&
b1000 /&
b1 -&
1J&
00&
1w%
0)
b1 |%
1}%
1#
0y%
0x%
b10 S&
b1 x&
b1 \&
b1 +'
b1110 ,'
b1110 *'
b1110 ]&
b1110 {&
b1110 U&
#50000
0"
#50500
1"
b1110 o&
b111 k&
b1110 g&
b1000000000000000000000001111 e&
b101 H&
b1000000000000000000000001111 r%
b1110 T&
b111 Z&
b1110 ^&
b1110 r&
b1110 Y&
b1110 q&
b1110 [&
b1111 L&
b10 $&
b1111 v&
b0 c&
b0 b&
b0 R&
b0 Q&
b1111 _&
b1111 w&
b0 W&
b0 X&
b0 S&
b1111 ,'
b1110 &
b1110 0
b1110 <
b10001100000001110000000000000000 4
b10001100000001110000000000000000 2
b10001100000001110000000000000000 (
b1101 I&
b0 /&
0J&
0%&
b11 -&
10&
b1111 *'
0w%
b1111 ]&
1)
b11 |%
0#
0}%
b1111 {&
b1111 x&
b1111 \&
b1111 U&
b1111 +'
b11101 ,'
b11101 *'
b11101 ]&
b11101 {&
b11101 U&
#51000
0"
#51500
1"
b11101 o&
b0 m&
b0 k&
b10001100000001110000000000000000 i&
b1101 H&
b10001100000001110000000000000000 V&
b0 Z&
b0 '
b11101 ^&
b11101 r&
b0 1
b11101 Y&
b1 I&
b0 -&
1J&
b10 ,&
1w%
b10 {%
b0 |%
b1111 {&
b0 x&
b0 \&
b1111 U&
b0 +'
b1110 ,'
b1110 *'
b1110 ]&
#52000
0"
#52500
1"
b1110 o&
b1111 g&
b1 H&
b1111 T&
b1110 ^&
b1110 r&
b1110 Y&
b1111 q&
b1111 [&
b1111 ,'
b1111 &
b1111 0
b1111 <
b10101100000001110000000000010100 4
b10101100000001110000000000010100 2
b10101100000001110000000000010100 (
b101 I&
b0 ,&
1%&
b1000 /&
b1 -&
00&
b1111 *'
b1111 ]&
0)
b1 |%
1}%
1#
b0 {%
b1 x&
b1 \&
b1 +'
b10000 ,'
b10000 *'
b10000 ]&
b10000 {&
b10000 U&
#53000
0"
#53500
1"
b10000 o&
b10101100000001110000000000010100 i&
b10000 g&
b10101100000001110000000000010100 e&
b101 H&
b10101100000001110000000000010100 r%
b10000 T&
b10101100000001110000000000010100 V&
b10000 ^&
b10000 r&
b10000 Y&
b10000 q&
b10000 [&
b10100 L&
b101011 $&
b10100 v&
b111 b&
b111 R&
b10100 _&
b10100 w&
b111 X&
b111 S&
b10001 ,'
b10000 &
b10000 0
b10000 <
b11 4
b11 2
b11 (
b110 I&
b0 /&
0J&
0%&
b11 -&
10&
b10001 *'
0w%
b10001 ]&
1)
b11 |%
0#
0}%
b10001 {&
b10100 x&
b10100 \&
b10001 U&
b10100 +'
b100100 ,'
b100100 *'
b100100 ]&
b100100 {&
b100100 U&
#54000
0"
#54500
1"
b100100 o&
b111 m&
b11 i&
b110 H&
b11 V&
b111 '
b100100 ^&
b100100 r&
b111 1
b100100 Y&
b1001 I&
b10 -&
1'&
1t%
b10 |%
b0 [&
b10100 ,'
b10100 *'
b10100 ]&
b10100 {&
b10100 U&
#55000
0"
#55500
1"
b10100 o&
b1001 H&
b10100 ^&
b10100 r&
b10100 Y&
b1 I&
0'&
b0 -&
1&&
1)&
00&
0)
1v%
1$
b0 |%
0t%
0%
03
b10000 [&
b10100 &
b10100 0
b100100 ,'
b0 4
b0 2
b10100 <
b0 (
b111 x&
b100100 *'
b100100 ]&
b111 \&
b111 +'
b10111 ,'
b100100 {&
b10111 *'
b10111 ]&
b100100 U&
b10111 {&
b10111 U&
#56000
