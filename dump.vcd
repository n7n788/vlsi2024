$date
    Jul 25, 2024  07:52:13
$end
$version
    TOOL:	xmsim	22.09-s007
$end
$timescale
    10 ps
$end

$scope module test32 $end

$scope module top0 $end
$var wire      1 !    reset_  $end
$var wire      1 "    clk  $end
$var wire      1 #    memread0  $end
$var wire      1 $    memwrite0  $end
$var wire      1 %    rw0_  $end
$var wire     10 &    addr0 [9:0] $end
$var wire     32 '    idata0 [31:0] $end
$var wire     32 (    odata0 [31:0] $end
$var wire      1 )    breq0_  $end
$var wire      1 *    bgrt0_  $end
$var wire      1 +    memread1  $end
$var wire      1 ,    memwrite1  $end
$var wire      1 -    rw1_  $end
$var wire     10 .    addr1 [9:0] $end
$var wire     32 /    idata1 [31:0] $end
$var wire     32 (    odata1 [31:0] $end
$var wire      1 0    breq1_  $end
$var wire      1 1    bgrt1_  $end
$var wire     10 2    addr [9:0] $end
$var wire     32 3    idata [31:0] $end
$var wire     32 4    odata [31:0] $end
$var wire      1 5    rw_  $end

$scope module devices0 $end
$var wire     10 2    addr [9:0] $end
$var wire     32 3    idata [31:0] $end
$var wire     32 4    odata [31:0] $end
$var wire      1 5    rw_  $end
$var wire      1 !    reset_  $end
$var wire      1 "    clk  $end
$var wire     32 6    odata0 [31:0] $end
$var wire     32 7    odata1 [31:0] $end
$var wire     32 8    odata2 [31:0] $end
$var wire     32 9    odata3 [31:0] $end
$var wire      1 :    cs0_  $end
$var wire      1 ;    cs1_  $end
$var wire      1 <    cs2_  $end
$var wire      1 =    cs3_  $end

$scope module addrdec0 $end
$var wire     10 2    addr [9:0] $end
$var wire      1 :    cs0_  $end
$var wire      1 ;    cs1_  $end
$var wire      1 <    cs2_  $end
$var wire      1 =    cs3_  $end
$upscope $end


$scope module sram0 $end
$var wire      8 >    addr [7:0] $end
$var wire     32 3    idata [31:0] $end
$var wire     32 6    odata [31:0] $end
$var wire      1 :    cs_  $end
$var wire      1 5    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 ?    mem[255] [31:0] $end
$var reg      32 @    mem[254] [31:0] $end
$var reg      32 A    mem[253] [31:0] $end
$var reg      32 B    mem[252] [31:0] $end
$var reg      32 C    mem[251] [31:0] $end
$var reg      32 D    mem[250] [31:0] $end
$var reg      32 E    mem[249] [31:0] $end
$var reg      32 F    mem[248] [31:0] $end
$var reg      32 G    mem[247] [31:0] $end
$var reg      32 H    mem[246] [31:0] $end
$var reg      32 I    mem[245] [31:0] $end
$var reg      32 J    mem[244] [31:0] $end
$var reg      32 K    mem[243] [31:0] $end
$var reg      32 L    mem[242] [31:0] $end
$var reg      32 M    mem[241] [31:0] $end
$var reg      32 N    mem[240] [31:0] $end
$var reg      32 O    mem[239] [31:0] $end
$var reg      32 P    mem[238] [31:0] $end
$var reg      32 Q    mem[237] [31:0] $end
$var reg      32 R    mem[236] [31:0] $end
$var reg      32 S    mem[235] [31:0] $end
$var reg      32 T    mem[234] [31:0] $end
$var reg      32 U    mem[233] [31:0] $end
$var reg      32 V    mem[232] [31:0] $end
$var reg      32 W    mem[231] [31:0] $end
$var reg      32 X    mem[230] [31:0] $end
$var reg      32 Y    mem[229] [31:0] $end
$var reg      32 Z    mem[228] [31:0] $end
$var reg      32 [    mem[227] [31:0] $end
$var reg      32 \    mem[226] [31:0] $end
$var reg      32 ]    mem[225] [31:0] $end
$var reg      32 ^    mem[224] [31:0] $end
$var reg      32 _    mem[223] [31:0] $end
$var reg      32 `    mem[222] [31:0] $end
$var reg      32 a    mem[221] [31:0] $end
$var reg      32 b    mem[220] [31:0] $end
$var reg      32 c    mem[219] [31:0] $end
$var reg      32 d    mem[218] [31:0] $end
$var reg      32 e    mem[217] [31:0] $end
$var reg      32 f    mem[216] [31:0] $end
$var reg      32 g    mem[215] [31:0] $end
$var reg      32 h    mem[214] [31:0] $end
$var reg      32 i    mem[213] [31:0] $end
$var reg      32 j    mem[212] [31:0] $end
$var reg      32 k    mem[211] [31:0] $end
$var reg      32 l    mem[210] [31:0] $end
$var reg      32 m    mem[209] [31:0] $end
$var reg      32 n    mem[208] [31:0] $end
$var reg      32 o    mem[207] [31:0] $end
$var reg      32 p    mem[206] [31:0] $end
$var reg      32 q    mem[205] [31:0] $end
$var reg      32 r    mem[204] [31:0] $end
$var reg      32 s    mem[203] [31:0] $end
$var reg      32 t    mem[202] [31:0] $end
$var reg      32 u    mem[201] [31:0] $end
$var reg      32 v    mem[200] [31:0] $end
$var reg      32 w    mem[199] [31:0] $end
$var reg      32 x    mem[198] [31:0] $end
$var reg      32 y    mem[197] [31:0] $end
$var reg      32 z    mem[196] [31:0] $end
$var reg      32 {    mem[195] [31:0] $end
$var reg      32 |    mem[194] [31:0] $end
$var reg      32 }    mem[193] [31:0] $end
$var reg      32 ~    mem[192] [31:0] $end
$var reg      32 !!   mem[191] [31:0] $end
$var reg      32 "!   mem[190] [31:0] $end
$var reg      32 #!   mem[189] [31:0] $end
$var reg      32 $!   mem[188] [31:0] $end
$var reg      32 %!   mem[187] [31:0] $end
$var reg      32 &!   mem[186] [31:0] $end
$var reg      32 '!   mem[185] [31:0] $end
$var reg      32 (!   mem[184] [31:0] $end
$var reg      32 )!   mem[183] [31:0] $end
$var reg      32 *!   mem[182] [31:0] $end
$var reg      32 +!   mem[181] [31:0] $end
$var reg      32 ,!   mem[180] [31:0] $end
$var reg      32 -!   mem[179] [31:0] $end
$var reg      32 .!   mem[178] [31:0] $end
$var reg      32 /!   mem[177] [31:0] $end
$var reg      32 0!   mem[176] [31:0] $end
$var reg      32 1!   mem[175] [31:0] $end
$var reg      32 2!   mem[174] [31:0] $end
$var reg      32 3!   mem[173] [31:0] $end
$var reg      32 4!   mem[172] [31:0] $end
$var reg      32 5!   mem[171] [31:0] $end
$var reg      32 6!   mem[170] [31:0] $end
$var reg      32 7!   mem[169] [31:0] $end
$var reg      32 8!   mem[168] [31:0] $end
$var reg      32 9!   mem[167] [31:0] $end
$var reg      32 :!   mem[166] [31:0] $end
$var reg      32 ;!   mem[165] [31:0] $end
$var reg      32 <!   mem[164] [31:0] $end
$var reg      32 =!   mem[163] [31:0] $end
$var reg      32 >!   mem[162] [31:0] $end
$var reg      32 ?!   mem[161] [31:0] $end
$var reg      32 @!   mem[160] [31:0] $end
$var reg      32 A!   mem[159] [31:0] $end
$var reg      32 B!   mem[158] [31:0] $end
$var reg      32 C!   mem[157] [31:0] $end
$var reg      32 D!   mem[156] [31:0] $end
$var reg      32 E!   mem[155] [31:0] $end
$var reg      32 F!   mem[154] [31:0] $end
$var reg      32 G!   mem[153] [31:0] $end
$var reg      32 H!   mem[152] [31:0] $end
$var reg      32 I!   mem[151] [31:0] $end
$var reg      32 J!   mem[150] [31:0] $end
$var reg      32 K!   mem[149] [31:0] $end
$var reg      32 L!   mem[148] [31:0] $end
$var reg      32 M!   mem[147] [31:0] $end
$var reg      32 N!   mem[146] [31:0] $end
$var reg      32 O!   mem[145] [31:0] $end
$var reg      32 P!   mem[144] [31:0] $end
$var reg      32 Q!   mem[143] [31:0] $end
$var reg      32 R!   mem[142] [31:0] $end
$var reg      32 S!   mem[141] [31:0] $end
$var reg      32 T!   mem[140] [31:0] $end
$var reg      32 U!   mem[139] [31:0] $end
$var reg      32 V!   mem[138] [31:0] $end
$var reg      32 W!   mem[137] [31:0] $end
$var reg      32 X!   mem[136] [31:0] $end
$var reg      32 Y!   mem[135] [31:0] $end
$var reg      32 Z!   mem[134] [31:0] $end
$var reg      32 [!   mem[133] [31:0] $end
$var reg      32 \!   mem[132] [31:0] $end
$var reg      32 ]!   mem[131] [31:0] $end
$var reg      32 ^!   mem[130] [31:0] $end
$var reg      32 _!   mem[129] [31:0] $end
$var reg      32 `!   mem[128] [31:0] $end
$var reg      32 a!   mem[127] [31:0] $end
$var reg      32 b!   mem[126] [31:0] $end
$var reg      32 c!   mem[125] [31:0] $end
$var reg      32 d!   mem[124] [31:0] $end
$var reg      32 e!   mem[123] [31:0] $end
$var reg      32 f!   mem[122] [31:0] $end
$var reg      32 g!   mem[121] [31:0] $end
$var reg      32 h!   mem[120] [31:0] $end
$var reg      32 i!   mem[119] [31:0] $end
$var reg      32 j!   mem[118] [31:0] $end
$var reg      32 k!   mem[117] [31:0] $end
$var reg      32 l!   mem[116] [31:0] $end
$var reg      32 m!   mem[115] [31:0] $end
$var reg      32 n!   mem[114] [31:0] $end
$var reg      32 o!   mem[113] [31:0] $end
$var reg      32 p!   mem[112] [31:0] $end
$var reg      32 q!   mem[111] [31:0] $end
$var reg      32 r!   mem[110] [31:0] $end
$var reg      32 s!   mem[109] [31:0] $end
$var reg      32 t!   mem[108] [31:0] $end
$var reg      32 u!   mem[107] [31:0] $end
$var reg      32 v!   mem[106] [31:0] $end
$var reg      32 w!   mem[105] [31:0] $end
$var reg      32 x!   mem[104] [31:0] $end
$var reg      32 y!   mem[103] [31:0] $end
$var reg      32 z!   mem[102] [31:0] $end
$var reg      32 {!   mem[101] [31:0] $end
$var reg      32 |!   mem[100] [31:0] $end
$var reg      32 }!   mem[99] [31:0] $end
$var reg      32 ~!   mem[98] [31:0] $end
$var reg      32 !"   mem[97] [31:0] $end
$var reg      32 ""   mem[96] [31:0] $end
$var reg      32 #"   mem[95] [31:0] $end
$var reg      32 $"   mem[94] [31:0] $end
$var reg      32 %"   mem[93] [31:0] $end
$var reg      32 &"   mem[92] [31:0] $end
$var reg      32 '"   mem[91] [31:0] $end
$var reg      32 ("   mem[90] [31:0] $end
$var reg      32 )"   mem[89] [31:0] $end
$var reg      32 *"   mem[88] [31:0] $end
$var reg      32 +"   mem[87] [31:0] $end
$var reg      32 ,"   mem[86] [31:0] $end
$var reg      32 -"   mem[85] [31:0] $end
$var reg      32 ."   mem[84] [31:0] $end
$var reg      32 /"   mem[83] [31:0] $end
$var reg      32 0"   mem[82] [31:0] $end
$var reg      32 1"   mem[81] [31:0] $end
$var reg      32 2"   mem[80] [31:0] $end
$var reg      32 3"   mem[79] [31:0] $end
$var reg      32 4"   mem[78] [31:0] $end
$var reg      32 5"   mem[77] [31:0] $end
$var reg      32 6"   mem[76] [31:0] $end
$var reg      32 7"   mem[75] [31:0] $end
$var reg      32 8"   mem[74] [31:0] $end
$var reg      32 9"   mem[73] [31:0] $end
$var reg      32 :"   mem[72] [31:0] $end
$var reg      32 ;"   mem[71] [31:0] $end
$var reg      32 <"   mem[70] [31:0] $end
$var reg      32 ="   mem[69] [31:0] $end
$var reg      32 >"   mem[68] [31:0] $end
$var reg      32 ?"   mem[67] [31:0] $end
$var reg      32 @"   mem[66] [31:0] $end
$var reg      32 A"   mem[65] [31:0] $end
$var reg      32 B"   mem[64] [31:0] $end
$var reg      32 C"   mem[63] [31:0] $end
$var reg      32 D"   mem[62] [31:0] $end
$var reg      32 E"   mem[61] [31:0] $end
$var reg      32 F"   mem[60] [31:0] $end
$var reg      32 G"   mem[59] [31:0] $end
$var reg      32 H"   mem[58] [31:0] $end
$var reg      32 I"   mem[57] [31:0] $end
$var reg      32 J"   mem[56] [31:0] $end
$var reg      32 K"   mem[55] [31:0] $end
$var reg      32 L"   mem[54] [31:0] $end
$var reg      32 M"   mem[53] [31:0] $end
$var reg      32 N"   mem[52] [31:0] $end
$var reg      32 O"   mem[51] [31:0] $end
$var reg      32 P"   mem[50] [31:0] $end
$var reg      32 Q"   mem[49] [31:0] $end
$var reg      32 R"   mem[48] [31:0] $end
$var reg      32 S"   mem[47] [31:0] $end
$var reg      32 T"   mem[46] [31:0] $end
$var reg      32 U"   mem[45] [31:0] $end
$var reg      32 V"   mem[44] [31:0] $end
$var reg      32 W"   mem[43] [31:0] $end
$var reg      32 X"   mem[42] [31:0] $end
$var reg      32 Y"   mem[41] [31:0] $end
$var reg      32 Z"   mem[40] [31:0] $end
$var reg      32 ["   mem[39] [31:0] $end
$var reg      32 \"   mem[38] [31:0] $end
$var reg      32 ]"   mem[37] [31:0] $end
$var reg      32 ^"   mem[36] [31:0] $end
$var reg      32 _"   mem[35] [31:0] $end
$var reg      32 `"   mem[34] [31:0] $end
$var reg      32 a"   mem[33] [31:0] $end
$var reg      32 b"   mem[32] [31:0] $end
$var reg      32 c"   mem[31] [31:0] $end
$var reg      32 d"   mem[30] [31:0] $end
$var reg      32 e"   mem[29] [31:0] $end
$var reg      32 f"   mem[28] [31:0] $end
$var reg      32 g"   mem[27] [31:0] $end
$var reg      32 h"   mem[26] [31:0] $end
$var reg      32 i"   mem[25] [31:0] $end
$var reg      32 j"   mem[24] [31:0] $end
$var reg      32 k"   mem[23] [31:0] $end
$var reg      32 l"   mem[22] [31:0] $end
$var reg      32 m"   mem[21] [31:0] $end
$var reg      32 n"   mem[20] [31:0] $end
$var reg      32 o"   mem[19] [31:0] $end
$var reg      32 p"   mem[18] [31:0] $end
$var reg      32 q"   mem[17] [31:0] $end
$var reg      32 r"   mem[16] [31:0] $end
$var reg      32 s"   mem[15] [31:0] $end
$var reg      32 t"   mem[14] [31:0] $end
$var reg      32 u"   mem[13] [31:0] $end
$var reg      32 v"   mem[12] [31:0] $end
$var reg      32 w"   mem[11] [31:0] $end
$var reg      32 x"   mem[10] [31:0] $end
$var reg      32 y"   mem[9] [31:0] $end
$var reg      32 z"   mem[8] [31:0] $end
$var reg      32 {"   mem[7] [31:0] $end
$var reg      32 |"   mem[6] [31:0] $end
$var reg      32 }"   mem[5] [31:0] $end
$var reg      32 ~"   mem[4] [31:0] $end
$var reg      32 !#   mem[3] [31:0] $end
$var reg      32 "#   mem[2] [31:0] $end
$var reg      32 ##   mem[1] [31:0] $end
$var reg      32 $#   mem[0] [31:0] $end
$upscope $end


$scope module sram1 $end
$var wire      8 >    addr [7:0] $end
$var wire     32 3    idata [31:0] $end
$var wire     32 7    odata [31:0] $end
$var wire      1 ;    cs_  $end
$var wire      1 5    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 %#   mem[255] [31:0] $end
$var reg      32 &#   mem[254] [31:0] $end
$var reg      32 '#   mem[253] [31:0] $end
$var reg      32 (#   mem[252] [31:0] $end
$var reg      32 )#   mem[251] [31:0] $end
$var reg      32 *#   mem[250] [31:0] $end
$var reg      32 +#   mem[249] [31:0] $end
$var reg      32 ,#   mem[248] [31:0] $end
$var reg      32 -#   mem[247] [31:0] $end
$var reg      32 .#   mem[246] [31:0] $end
$var reg      32 /#   mem[245] [31:0] $end
$var reg      32 0#   mem[244] [31:0] $end
$var reg      32 1#   mem[243] [31:0] $end
$var reg      32 2#   mem[242] [31:0] $end
$var reg      32 3#   mem[241] [31:0] $end
$var reg      32 4#   mem[240] [31:0] $end
$var reg      32 5#   mem[239] [31:0] $end
$var reg      32 6#   mem[238] [31:0] $end
$var reg      32 7#   mem[237] [31:0] $end
$var reg      32 8#   mem[236] [31:0] $end
$var reg      32 9#   mem[235] [31:0] $end
$var reg      32 :#   mem[234] [31:0] $end
$var reg      32 ;#   mem[233] [31:0] $end
$var reg      32 <#   mem[232] [31:0] $end
$var reg      32 =#   mem[231] [31:0] $end
$var reg      32 >#   mem[230] [31:0] $end
$var reg      32 ?#   mem[229] [31:0] $end
$var reg      32 @#   mem[228] [31:0] $end
$var reg      32 A#   mem[227] [31:0] $end
$var reg      32 B#   mem[226] [31:0] $end
$var reg      32 C#   mem[225] [31:0] $end
$var reg      32 D#   mem[224] [31:0] $end
$var reg      32 E#   mem[223] [31:0] $end
$var reg      32 F#   mem[222] [31:0] $end
$var reg      32 G#   mem[221] [31:0] $end
$var reg      32 H#   mem[220] [31:0] $end
$var reg      32 I#   mem[219] [31:0] $end
$var reg      32 J#   mem[218] [31:0] $end
$var reg      32 K#   mem[217] [31:0] $end
$var reg      32 L#   mem[216] [31:0] $end
$var reg      32 M#   mem[215] [31:0] $end
$var reg      32 N#   mem[214] [31:0] $end
$var reg      32 O#   mem[213] [31:0] $end
$var reg      32 P#   mem[212] [31:0] $end
$var reg      32 Q#   mem[211] [31:0] $end
$var reg      32 R#   mem[210] [31:0] $end
$var reg      32 S#   mem[209] [31:0] $end
$var reg      32 T#   mem[208] [31:0] $end
$var reg      32 U#   mem[207] [31:0] $end
$var reg      32 V#   mem[206] [31:0] $end
$var reg      32 W#   mem[205] [31:0] $end
$var reg      32 X#   mem[204] [31:0] $end
$var reg      32 Y#   mem[203] [31:0] $end
$var reg      32 Z#   mem[202] [31:0] $end
$var reg      32 [#   mem[201] [31:0] $end
$var reg      32 \#   mem[200] [31:0] $end
$var reg      32 ]#   mem[199] [31:0] $end
$var reg      32 ^#   mem[198] [31:0] $end
$var reg      32 _#   mem[197] [31:0] $end
$var reg      32 `#   mem[196] [31:0] $end
$var reg      32 a#   mem[195] [31:0] $end
$var reg      32 b#   mem[194] [31:0] $end
$var reg      32 c#   mem[193] [31:0] $end
$var reg      32 d#   mem[192] [31:0] $end
$var reg      32 e#   mem[191] [31:0] $end
$var reg      32 f#   mem[190] [31:0] $end
$var reg      32 g#   mem[189] [31:0] $end
$var reg      32 h#   mem[188] [31:0] $end
$var reg      32 i#   mem[187] [31:0] $end
$var reg      32 j#   mem[186] [31:0] $end
$var reg      32 k#   mem[185] [31:0] $end
$var reg      32 l#   mem[184] [31:0] $end
$var reg      32 m#   mem[183] [31:0] $end
$var reg      32 n#   mem[182] [31:0] $end
$var reg      32 o#   mem[181] [31:0] $end
$var reg      32 p#   mem[180] [31:0] $end
$var reg      32 q#   mem[179] [31:0] $end
$var reg      32 r#   mem[178] [31:0] $end
$var reg      32 s#   mem[177] [31:0] $end
$var reg      32 t#   mem[176] [31:0] $end
$var reg      32 u#   mem[175] [31:0] $end
$var reg      32 v#   mem[174] [31:0] $end
$var reg      32 w#   mem[173] [31:0] $end
$var reg      32 x#   mem[172] [31:0] $end
$var reg      32 y#   mem[171] [31:0] $end
$var reg      32 z#   mem[170] [31:0] $end
$var reg      32 {#   mem[169] [31:0] $end
$var reg      32 |#   mem[168] [31:0] $end
$var reg      32 }#   mem[167] [31:0] $end
$var reg      32 ~#   mem[166] [31:0] $end
$var reg      32 !$   mem[165] [31:0] $end
$var reg      32 "$   mem[164] [31:0] $end
$var reg      32 #$   mem[163] [31:0] $end
$var reg      32 $$   mem[162] [31:0] $end
$var reg      32 %$   mem[161] [31:0] $end
$var reg      32 &$   mem[160] [31:0] $end
$var reg      32 '$   mem[159] [31:0] $end
$var reg      32 ($   mem[158] [31:0] $end
$var reg      32 )$   mem[157] [31:0] $end
$var reg      32 *$   mem[156] [31:0] $end
$var reg      32 +$   mem[155] [31:0] $end
$var reg      32 ,$   mem[154] [31:0] $end
$var reg      32 -$   mem[153] [31:0] $end
$var reg      32 .$   mem[152] [31:0] $end
$var reg      32 /$   mem[151] [31:0] $end
$var reg      32 0$   mem[150] [31:0] $end
$var reg      32 1$   mem[149] [31:0] $end
$var reg      32 2$   mem[148] [31:0] $end
$var reg      32 3$   mem[147] [31:0] $end
$var reg      32 4$   mem[146] [31:0] $end
$var reg      32 5$   mem[145] [31:0] $end
$var reg      32 6$   mem[144] [31:0] $end
$var reg      32 7$   mem[143] [31:0] $end
$var reg      32 8$   mem[142] [31:0] $end
$var reg      32 9$   mem[141] [31:0] $end
$var reg      32 :$   mem[140] [31:0] $end
$var reg      32 ;$   mem[139] [31:0] $end
$var reg      32 <$   mem[138] [31:0] $end
$var reg      32 =$   mem[137] [31:0] $end
$var reg      32 >$   mem[136] [31:0] $end
$var reg      32 ?$   mem[135] [31:0] $end
$var reg      32 @$   mem[134] [31:0] $end
$var reg      32 A$   mem[133] [31:0] $end
$var reg      32 B$   mem[132] [31:0] $end
$var reg      32 C$   mem[131] [31:0] $end
$var reg      32 D$   mem[130] [31:0] $end
$var reg      32 E$   mem[129] [31:0] $end
$var reg      32 F$   mem[128] [31:0] $end
$var reg      32 G$   mem[127] [31:0] $end
$var reg      32 H$   mem[126] [31:0] $end
$var reg      32 I$   mem[125] [31:0] $end
$var reg      32 J$   mem[124] [31:0] $end
$var reg      32 K$   mem[123] [31:0] $end
$var reg      32 L$   mem[122] [31:0] $end
$var reg      32 M$   mem[121] [31:0] $end
$var reg      32 N$   mem[120] [31:0] $end
$var reg      32 O$   mem[119] [31:0] $end
$var reg      32 P$   mem[118] [31:0] $end
$var reg      32 Q$   mem[117] [31:0] $end
$var reg      32 R$   mem[116] [31:0] $end
$var reg      32 S$   mem[115] [31:0] $end
$var reg      32 T$   mem[114] [31:0] $end
$var reg      32 U$   mem[113] [31:0] $end
$var reg      32 V$   mem[112] [31:0] $end
$var reg      32 W$   mem[111] [31:0] $end
$var reg      32 X$   mem[110] [31:0] $end
$var reg      32 Y$   mem[109] [31:0] $end
$var reg      32 Z$   mem[108] [31:0] $end
$var reg      32 [$   mem[107] [31:0] $end
$var reg      32 \$   mem[106] [31:0] $end
$var reg      32 ]$   mem[105] [31:0] $end
$var reg      32 ^$   mem[104] [31:0] $end
$var reg      32 _$   mem[103] [31:0] $end
$var reg      32 `$   mem[102] [31:0] $end
$var reg      32 a$   mem[101] [31:0] $end
$var reg      32 b$   mem[100] [31:0] $end
$var reg      32 c$   mem[99] [31:0] $end
$var reg      32 d$   mem[98] [31:0] $end
$var reg      32 e$   mem[97] [31:0] $end
$var reg      32 f$   mem[96] [31:0] $end
$var reg      32 g$   mem[95] [31:0] $end
$var reg      32 h$   mem[94] [31:0] $end
$var reg      32 i$   mem[93] [31:0] $end
$var reg      32 j$   mem[92] [31:0] $end
$var reg      32 k$   mem[91] [31:0] $end
$var reg      32 l$   mem[90] [31:0] $end
$var reg      32 m$   mem[89] [31:0] $end
$var reg      32 n$   mem[88] [31:0] $end
$var reg      32 o$   mem[87] [31:0] $end
$var reg      32 p$   mem[86] [31:0] $end
$var reg      32 q$   mem[85] [31:0] $end
$var reg      32 r$   mem[84] [31:0] $end
$var reg      32 s$   mem[83] [31:0] $end
$var reg      32 t$   mem[82] [31:0] $end
$var reg      32 u$   mem[81] [31:0] $end
$var reg      32 v$   mem[80] [31:0] $end
$var reg      32 w$   mem[79] [31:0] $end
$var reg      32 x$   mem[78] [31:0] $end
$var reg      32 y$   mem[77] [31:0] $end
$var reg      32 z$   mem[76] [31:0] $end
$var reg      32 {$   mem[75] [31:0] $end
$var reg      32 |$   mem[74] [31:0] $end
$var reg      32 }$   mem[73] [31:0] $end
$var reg      32 ~$   mem[72] [31:0] $end
$var reg      32 !%   mem[71] [31:0] $end
$var reg      32 "%   mem[70] [31:0] $end
$var reg      32 #%   mem[69] [31:0] $end
$var reg      32 $%   mem[68] [31:0] $end
$var reg      32 %%   mem[67] [31:0] $end
$var reg      32 &%   mem[66] [31:0] $end
$var reg      32 '%   mem[65] [31:0] $end
$var reg      32 (%   mem[64] [31:0] $end
$var reg      32 )%   mem[63] [31:0] $end
$var reg      32 *%   mem[62] [31:0] $end
$var reg      32 +%   mem[61] [31:0] $end
$var reg      32 ,%   mem[60] [31:0] $end
$var reg      32 -%   mem[59] [31:0] $end
$var reg      32 .%   mem[58] [31:0] $end
$var reg      32 /%   mem[57] [31:0] $end
$var reg      32 0%   mem[56] [31:0] $end
$var reg      32 1%   mem[55] [31:0] $end
$var reg      32 2%   mem[54] [31:0] $end
$var reg      32 3%   mem[53] [31:0] $end
$var reg      32 4%   mem[52] [31:0] $end
$var reg      32 5%   mem[51] [31:0] $end
$var reg      32 6%   mem[50] [31:0] $end
$var reg      32 7%   mem[49] [31:0] $end
$var reg      32 8%   mem[48] [31:0] $end
$var reg      32 9%   mem[47] [31:0] $end
$var reg      32 :%   mem[46] [31:0] $end
$var reg      32 ;%   mem[45] [31:0] $end
$var reg      32 <%   mem[44] [31:0] $end
$var reg      32 =%   mem[43] [31:0] $end
$var reg      32 >%   mem[42] [31:0] $end
$var reg      32 ?%   mem[41] [31:0] $end
$var reg      32 @%   mem[40] [31:0] $end
$var reg      32 A%   mem[39] [31:0] $end
$var reg      32 B%   mem[38] [31:0] $end
$var reg      32 C%   mem[37] [31:0] $end
$var reg      32 D%   mem[36] [31:0] $end
$var reg      32 E%   mem[35] [31:0] $end
$var reg      32 F%   mem[34] [31:0] $end
$var reg      32 G%   mem[33] [31:0] $end
$var reg      32 H%   mem[32] [31:0] $end
$var reg      32 I%   mem[31] [31:0] $end
$var reg      32 J%   mem[30] [31:0] $end
$var reg      32 K%   mem[29] [31:0] $end
$var reg      32 L%   mem[28] [31:0] $end
$var reg      32 M%   mem[27] [31:0] $end
$var reg      32 N%   mem[26] [31:0] $end
$var reg      32 O%   mem[25] [31:0] $end
$var reg      32 P%   mem[24] [31:0] $end
$var reg      32 Q%   mem[23] [31:0] $end
$var reg      32 R%   mem[22] [31:0] $end
$var reg      32 S%   mem[21] [31:0] $end
$var reg      32 T%   mem[20] [31:0] $end
$var reg      32 U%   mem[19] [31:0] $end
$var reg      32 V%   mem[18] [31:0] $end
$var reg      32 W%   mem[17] [31:0] $end
$var reg      32 X%   mem[16] [31:0] $end
$var reg      32 Y%   mem[15] [31:0] $end
$var reg      32 Z%   mem[14] [31:0] $end
$var reg      32 [%   mem[13] [31:0] $end
$var reg      32 \%   mem[12] [31:0] $end
$var reg      32 ]%   mem[11] [31:0] $end
$var reg      32 ^%   mem[10] [31:0] $end
$var reg      32 _%   mem[9] [31:0] $end
$var reg      32 `%   mem[8] [31:0] $end
$var reg      32 a%   mem[7] [31:0] $end
$var reg      32 b%   mem[6] [31:0] $end
$var reg      32 c%   mem[5] [31:0] $end
$var reg      32 d%   mem[4] [31:0] $end
$var reg      32 e%   mem[3] [31:0] $end
$var reg      32 f%   mem[2] [31:0] $end
$var reg      32 g%   mem[1] [31:0] $end
$var reg      32 h%   mem[0] [31:0] $end
$upscope $end


$scope module timer0 $end
$var wire      8 >    addr [7:0] $end
$var wire     32 3    idata [31:0] $end
$var wire     32 8    odata [31:0] $end
$var wire      1 <    cs_  $end
$var wire      1 5    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 i%   count [31:0] $end
$var reg       1 j%   en $end
$var wire      1 k%   clear  $end
$var wire      1 l%   start  $end
$var wire      1 m%   stop  $end
$upscope $end


$scope module timer1 $end
$var wire      8 >    addr [7:0] $end
$var wire     32 3    idata [31:0] $end
$var wire     32 9    odata [31:0] $end
$var wire      1 =    cs_  $end
$var wire      1 5    rw_  $end
$var wire      1 "    clk  $end
$var reg      32 n%   count [31:0] $end
$var reg       1 o%   en $end
$var wire      1 p%   clear  $end
$var wire      1 q%   start  $end
$var wire      1 r%   stop  $end
$upscope $end

$upscope $end


$scope module busarb0 $end
$var wire      1 )    breq0_  $end
$var wire      1 0    breq1_  $end
$var wire      1 *    bgrt0_  $end
$var wire      1 1    bgrt1_  $end
$var wire      1 !    reset_  $end
$var wire      1 "    clk  $end
$var reg       1 s%   state $end
$upscope $end


$scope module dut0 $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire     32 (    memdata [31:0] $end
$var wire      1 *    bgrt_  $end
$var wire      1 #    memread  $end
$var wire      1 $    memwrite  $end
$var wire     10 &    adr [9:0] $end
$var wire     32 '    writedata [31:0] $end
$var wire      1 )    breq_  $end
$var wire     32 t%   instr [31:0] $end
$var wire      1 u%   zero  $end
$var wire      1 v%   alusrca  $end
$var wire      1 w%   memtoreg  $end
$var wire      1 x%   iord  $end
$var wire      1 y%   pcen  $end
$var wire      1 z%   regwrite  $end
$var wire      1 {%   regdst  $end
$var wire      2 |%   aluop [1:0] $end
$var wire      2 }%   pcsource [1:0] $end
$var wire      2 ~%   alusrcb [1:0] $end
$var wire      1 !&   irwrite [3] $end
$var wire      1 "&   irwrite [2] $end
$var wire      1 #&   irwrite [1] $end
$var wire      1 $&   irwrite [0] $end
$var wire      3 %&   alucont [2:0] $end

$scope module cont $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire      6 &&   op [5:0] $end
$var wire      1 u%   zero  $end
$var wire      1 *    bgrt_  $end
$var reg       1 '&   memread $end
$var reg       1 (&   memwrite $end
$var reg       1 )&   alusrca $end
$var reg       1 *&   memtoreg $end
$var reg       1 +&   iord $end
$var wire      1 y%   pcen  $end
$var reg       1 ,&   regwrite $end
$var reg       1 -&   regdst $end
$var reg       2 .&   pcsource [1:0] $end
$var reg       2 /&   alusrcb [1:0] $end
$var reg       2 0&   aluop [1:0] $end
$var reg       4 1&   irwrite [3:0] $end
$var reg       1 2&   breq_ $end
$var parameter  4 3&   FETCH1 $end
$var parameter  4 4&   FETCH2 $end
$var parameter  4 5&   FETCH3 $end
$var parameter  4 6&   FETCH4 $end
$var parameter  4 7&   DECODE $end
$var parameter  4 8&   MEMADR $end
$var parameter  4 9&   LBRD $end
$var parameter  4 :&   LBWR $end
$var parameter  4 ;&   SBWR $end
$var parameter  4 <&   RTYPEEX $end
$var parameter  4 =&   RTYPEWR $end
$var parameter  4 >&   BEQEX $end
$var parameter  4 ?&   JEX $end
$var parameter  4 @&   ADDIEX $end
$var parameter  4 A&   ADDIWR $end
$var parameter  6 B&   LB $end
$var parameter  6 C&   SB $end
$var parameter  6 D&   LW $end
$var parameter  6 E&   SW $end
$var parameter  6 F&   RTYPE $end
$var parameter  6 G&   BEQ $end
$var parameter  6 H&   ADDI $end
$var parameter  6 I&   J $end
$var reg       4 J&   state [3:0] $end
$var reg       4 K&   nextstate [3:0] $end
$var reg       1 L&   pcwrite $end
$var reg       1 M&   pcwritecond $end
$upscope $end


$scope module ac $end
$var wire      2 |%   aluop [1:0] $end
$var wire      6 N&   funct [5:0] $end
$var reg       3 O&   alucont [2:0] $end
$upscope $end


$scope module dp $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire     32 (    memdata [31:0] $end
$var wire      1 v%   alusrca  $end
$var wire      1 w%   memtoreg  $end
$var wire      1 x%   iord  $end
$var wire      1 y%   pcen  $end
$var wire      1 z%   regwrite  $end
$var wire      1 {%   regdst  $end
$var wire      2 }%   pcsource [1:0] $end
$var wire      2 ~%   alusrcb [1:0] $end
$var wire      1 !&   irwrite [3] $end
$var wire      1 "&   irwrite [2] $end
$var wire      1 #&   irwrite [1] $end
$var wire      1 $&   irwrite [0] $end
$var wire      3 %&   alucont [2:0] $end
$var wire      1 u%   zero  $end
$var wire     32 t%   instr [31:0] $end
$var wire     10 &    adr [9:0] $end
$var wire     32 '    writedata [31:0] $end
$var parameter 32 P&   CONST_ZERO $end
$var parameter 32 Q&   CONST_ONE $end
$var parameter 32 R&   CONST_FOUR $end
$var wire      3 S&   ra1 [2:0] $end
$var wire      3 T&   ra2 [2:0] $end
$var wire      3 U&   wa [2:0] $end
$var wire     32 V&   pc [31:0] $end
$var wire     32 W&   nextpc [31:0] $end
$var wire     32 X&   md [31:0] $end
$var wire     32 Y&   rd1 [31:0] $end
$var wire     32 Z&   rd2 [31:0] $end
$var wire     32 [&   wd [31:0] $end
$var wire     32 \&   a [31:0] $end
$var wire     32 ]&   src1 [31:0] $end
$var wire     32 ^&   src2 [31:0] $end
$var wire     32 _&   aluresult [31:0] $end
$var wire     32 `&   aluout [31:0] $end
$var wire     32 a&   constx [31:0] $end

$scope module regmux $end
$var parameter 32 b&   WIDTH $end
$var wire      3 c&   d0 [2:0] $end
$var wire      3 d&   d1 [2:0] $end
$var wire      1 {%   s  $end
$var wire      3 U&   y [2:0] $end
$upscope $end


$scope module ir $end
$var parameter 32 e&   WIDTH $end
$var wire      1 "    clk  $end
$var wire      1 !&   en  $end
$var wire     32 (    d [31:0] $end
$var reg      32 f&   q [31:0] $end
$upscope $end


$scope module pcreg $end
$var parameter 32 g&   WIDTH $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire      1 y%   en  $end
$var wire     32 W&   d [31:0] $end
$var reg      32 h&   q [31:0] $end
$upscope $end


$scope module mdr $end
$var parameter 32 i&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 (    d [31:0] $end
$var reg      32 j&   q [31:0] $end
$upscope $end


$scope module areg $end
$var parameter 32 k&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 Y&   d [31:0] $end
$var reg      32 l&   q [31:0] $end
$upscope $end


$scope module wrd $end
$var parameter 32 m&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 Z&   d [31:0] $end
$var reg      32 n&   q [31:0] $end
$upscope $end


$scope module res $end
$var parameter 32 o&   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 _&   d [31:0] $end
$var reg      32 p&   q [31:0] $end
$upscope $end


$scope module adrmux $end
$var parameter 32 q&   WIDTH $end
$var wire     10 r&   d0 [9:0] $end
$var wire     10 s&   d1 [9:0] $end
$var wire      1 x%   s  $end
$var wire     10 &    y [9:0] $end
$upscope $end


$scope module src1mux $end
$var parameter 32 t&   WIDTH $end
$var wire     32 V&   d0 [31:0] $end
$var wire     32 \&   d1 [31:0] $end
$var wire      1 v%   s  $end
$var wire     32 ]&   y [31:0] $end
$upscope $end


$scope module src2mux $end
$var parameter 32 u&   WIDTH $end
$var wire     32 '    d0 [31:0] $end
$var wire     32 v&   d1 [31:0] $end
$var wire     32 w&   d2 [31:0] $end
$var wire     32 x&   d3 [31:0] $end
$var wire      2 ~%   s [1:0] $end
$var reg      32 y&   y [31:0] $end
$upscope $end


$scope module pcmux $end
$var parameter 32 z&   WIDTH $end
$var wire     32 _&   d0 [31:0] $end
$var wire     32 `&   d1 [31:0] $end
$var wire     32 a&   d2 [31:0] $end
$var wire     32 {&   d3 [31:0] $end
$var wire      2 }%   s [1:0] $end
$var reg      32 |&   y [31:0] $end
$upscope $end


$scope module wdmux $end
$var parameter 32 }&   WIDTH $end
$var wire     32 `&   d0 [31:0] $end
$var wire     32 X&   d1 [31:0] $end
$var wire      1 w%   s  $end
$var wire     32 [&   y [31:0] $end
$upscope $end


$scope module rf $end
$var parameter 32 ~&   WIDTH $end
$var parameter 32 !'   REGBITS $end
$var wire      1 "    clk  $end
$var wire      1 z%   regwrite  $end
$var wire      3 S&   ra1 [2:0] $end
$var wire      3 T&   ra2 [2:0] $end
$var wire      3 U&   wa [2:0] $end
$var wire     32 [&   wd [31:0] $end
$var wire     32 Y&   rd1 [31:0] $end
$var wire     32 Z&   rd2 [31:0] $end
$var reg      32 "'   RAM[7] [31:0] $end
$var reg      32 #'   RAM[6] [31:0] $end
$var reg      32 $'   RAM[5] [31:0] $end
$var reg      32 %'   RAM[4] [31:0] $end
$var reg      32 &'   RAM[3] [31:0] $end
$var reg      32 ''   RAM[2] [31:0] $end
$var reg      32 ('   RAM[1] [31:0] $end
$var reg      32 )'   RAM[0] [31:0] $end
$upscope $end


$scope module alunit $end
$var parameter 32 *'   WIDTH $end
$var wire     32 ]&   a [31:0] $end
$var wire     32 ^&   b [31:0] $end
$var wire      3 %&   alucont [2:0] $end
$var reg      32 +'   result [31:0] $end
$var wire     32 ,'   b2 [31:0] $end
$var wire     32 -'   sum [31:0] $end
$var wire     32 .'   slt [31:0] $end
$upscope $end


$scope module zd $end
$var parameter 32 /'   WIDTH $end
$var wire     32 _&   a [31:0] $end
$var wire      1 u%   y  $end
$upscope $end

$upscope $end

$upscope $end


$scope module dut1 $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire     32 (    memdata [31:0] $end
$var wire      1 1    bgrt_  $end
$var wire      1 +    memread  $end
$var wire      1 ,    memwrite  $end
$var wire     10 .    adr [9:0] $end
$var wire     32 /    writedata [31:0] $end
$var wire      1 0    breq_  $end
$var wire     32 0'   instr [31:0] $end
$var wire      1 1'   zero  $end
$var wire      1 2'   alusrca  $end
$var wire      1 3'   memtoreg  $end
$var wire      1 4'   iord  $end
$var wire      1 5'   pcen  $end
$var wire      1 6'   regwrite  $end
$var wire      1 7'   regdst  $end
$var wire      2 8'   aluop [1:0] $end
$var wire      2 9'   pcsource [1:0] $end
$var wire      2 :'   alusrcb [1:0] $end
$var wire      1 ;'   irwrite [3] $end
$var wire      1 <'   irwrite [2] $end
$var wire      1 ='   irwrite [1] $end
$var wire      1 >'   irwrite [0] $end
$var wire      3 ?'   alucont [2:0] $end

$scope module cont $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire      6 @'   op [5:0] $end
$var wire      1 1'   zero  $end
$var wire      1 1    bgrt_  $end
$var reg       1 A'   memread $end
$var reg       1 B'   memwrite $end
$var reg       1 C'   alusrca $end
$var reg       1 D'   memtoreg $end
$var reg       1 E'   iord $end
$var wire      1 5'   pcen  $end
$var reg       1 F'   regwrite $end
$var reg       1 G'   regdst $end
$var reg       2 H'   pcsource [1:0] $end
$var reg       2 I'   alusrcb [1:0] $end
$var reg       2 J'   aluop [1:0] $end
$var reg       4 K'   irwrite [3:0] $end
$var reg       1 L'   breq_ $end
$var parameter  4 M'   FETCH1 $end
$var parameter  4 N'   FETCH2 $end
$var parameter  4 O'   FETCH3 $end
$var parameter  4 P'   FETCH4 $end
$var parameter  4 Q'   DECODE $end
$var parameter  4 R'   MEMADR $end
$var parameter  4 S'   LBRD $end
$var parameter  4 T'   LBWR $end
$var parameter  4 U'   SBWR $end
$var parameter  4 V'   RTYPEEX $end
$var parameter  4 W'   RTYPEWR $end
$var parameter  4 X'   BEQEX $end
$var parameter  4 Y'   JEX $end
$var parameter  4 Z'   ADDIEX $end
$var parameter  4 ['   ADDIWR $end
$var parameter  6 \'   LB $end
$var parameter  6 ]'   SB $end
$var parameter  6 ^'   LW $end
$var parameter  6 _'   SW $end
$var parameter  6 `'   RTYPE $end
$var parameter  6 a'   BEQ $end
$var parameter  6 b'   ADDI $end
$var parameter  6 c'   J $end
$var reg       4 d'   state [3:0] $end
$var reg       4 e'   nextstate [3:0] $end
$var reg       1 f'   pcwrite $end
$var reg       1 g'   pcwritecond $end
$upscope $end


$scope module ac $end
$var wire      2 8'   aluop [1:0] $end
$var wire      6 h'   funct [5:0] $end
$var reg       3 i'   alucont [2:0] $end
$upscope $end


$scope module dp $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire     32 (    memdata [31:0] $end
$var wire      1 2'   alusrca  $end
$var wire      1 3'   memtoreg  $end
$var wire      1 4'   iord  $end
$var wire      1 5'   pcen  $end
$var wire      1 6'   regwrite  $end
$var wire      1 7'   regdst  $end
$var wire      2 9'   pcsource [1:0] $end
$var wire      2 :'   alusrcb [1:0] $end
$var wire      1 ;'   irwrite [3] $end
$var wire      1 <'   irwrite [2] $end
$var wire      1 ='   irwrite [1] $end
$var wire      1 >'   irwrite [0] $end
$var wire      3 ?'   alucont [2:0] $end
$var wire      1 1'   zero  $end
$var wire     32 0'   instr [31:0] $end
$var wire     10 .    adr [9:0] $end
$var wire     32 /    writedata [31:0] $end
$var parameter 32 j'   CONST_ZERO $end
$var parameter 32 k'   CONST_ONE $end
$var parameter 32 l'   CONST_FOUR $end
$var wire      3 m'   ra1 [2:0] $end
$var wire      3 n'   ra2 [2:0] $end
$var wire      3 o'   wa [2:0] $end
$var wire     32 p'   pc [31:0] $end
$var wire     32 q'   nextpc [31:0] $end
$var wire     32 r'   md [31:0] $end
$var wire     32 s'   rd1 [31:0] $end
$var wire     32 t'   rd2 [31:0] $end
$var wire     32 u'   wd [31:0] $end
$var wire     32 v'   a [31:0] $end
$var wire     32 w'   src1 [31:0] $end
$var wire     32 x'   src2 [31:0] $end
$var wire     32 y'   aluresult [31:0] $end
$var wire     32 z'   aluout [31:0] $end
$var wire     32 {'   constx [31:0] $end

$scope module regmux $end
$var parameter 32 |'   WIDTH $end
$var wire      3 }'   d0 [2:0] $end
$var wire      3 ~'   d1 [2:0] $end
$var wire      1 7'   s  $end
$var wire      3 o'   y [2:0] $end
$upscope $end


$scope module ir $end
$var parameter 32 !(   WIDTH $end
$var wire      1 "    clk  $end
$var wire      1 ;'   en  $end
$var wire     32 (    d [31:0] $end
$var reg      32 "(   q [31:0] $end
$upscope $end


$scope module pcreg $end
$var parameter 32 #(   WIDTH $end
$var wire      1 "    clk  $end
$var wire      1 !    reset_  $end
$var wire      1 5'   en  $end
$var wire     32 q'   d [31:0] $end
$var reg      32 $(   q [31:0] $end
$upscope $end


$scope module mdr $end
$var parameter 32 %(   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 (    d [31:0] $end
$var reg      32 &(   q [31:0] $end
$upscope $end


$scope module areg $end
$var parameter 32 '(   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 s'   d [31:0] $end
$var reg      32 ((   q [31:0] $end
$upscope $end


$scope module wrd $end
$var parameter 32 )(   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 t'   d [31:0] $end
$var reg      32 *(   q [31:0] $end
$upscope $end


$scope module res $end
$var parameter 32 +(   WIDTH $end
$var wire      1 "    clk  $end
$var wire     32 y'   d [31:0] $end
$var reg      32 ,(   q [31:0] $end
$upscope $end


$scope module adrmux $end
$var parameter 32 -(   WIDTH $end
$var wire     10 .(   d0 [9:0] $end
$var wire     10 /(   d1 [9:0] $end
$var wire      1 4'   s  $end
$var wire     10 .    y [9:0] $end
$upscope $end


$scope module src1mux $end
$var parameter 32 0(   WIDTH $end
$var wire     32 p'   d0 [31:0] $end
$var wire     32 v'   d1 [31:0] $end
$var wire      1 2'   s  $end
$var wire     32 w'   y [31:0] $end
$upscope $end


$scope module src2mux $end
$var parameter 32 1(   WIDTH $end
$var wire     32 /    d0 [31:0] $end
$var wire     32 2(   d1 [31:0] $end
$var wire     32 3(   d2 [31:0] $end
$var wire     32 4(   d3 [31:0] $end
$var wire      2 :'   s [1:0] $end
$var reg      32 5(   y [31:0] $end
$upscope $end


$scope module pcmux $end
$var parameter 32 6(   WIDTH $end
$var wire     32 y'   d0 [31:0] $end
$var wire     32 z'   d1 [31:0] $end
$var wire     32 {'   d2 [31:0] $end
$var wire     32 7(   d3 [31:0] $end
$var wire      2 9'   s [1:0] $end
$var reg      32 8(   y [31:0] $end
$upscope $end


$scope module wdmux $end
$var parameter 32 9(   WIDTH $end
$var wire     32 z'   d0 [31:0] $end
$var wire     32 r'   d1 [31:0] $end
$var wire      1 3'   s  $end
$var wire     32 u'   y [31:0] $end
$upscope $end


$scope module rf $end
$var parameter 32 :(   WIDTH $end
$var parameter 32 ;(   REGBITS $end
$var wire      1 "    clk  $end
$var wire      1 6'   regwrite  $end
$var wire      3 m'   ra1 [2:0] $end
$var wire      3 n'   ra2 [2:0] $end
$var wire      3 o'   wa [2:0] $end
$var wire     32 u'   wd [31:0] $end
$var wire     32 s'   rd1 [31:0] $end
$var wire     32 t'   rd2 [31:0] $end
$var reg      32 <(   RAM[7] [31:0] $end
$var reg      32 =(   RAM[6] [31:0] $end
$var reg      32 >(   RAM[5] [31:0] $end
$var reg      32 ?(   RAM[4] [31:0] $end
$var reg      32 @(   RAM[3] [31:0] $end
$var reg      32 A(   RAM[2] [31:0] $end
$var reg      32 B(   RAM[1] [31:0] $end
$var reg      32 C(   RAM[0] [31:0] $end
$upscope $end


$scope module alunit $end
$var parameter 32 D(   WIDTH $end
$var wire     32 w'   a [31:0] $end
$var wire     32 x'   b [31:0] $end
$var wire      3 ?'   alucont [2:0] $end
$var reg      32 E(   result [31:0] $end
$var wire     32 F(   b2 [31:0] $end
$var wire     32 G(   sum [31:0] $end
$var wire     32 H(   slt [31:0] $end
$upscope $end


$scope module zd $end
$var parameter 32 I(   WIDTH $end
$var wire     32 y'   a [31:0] $end
$var wire      1 1'   y  $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b100000 I(
b100000 D(
b11 ;(
b100000 :(
b100000 9(
b100000 6(
b100000 1(
b100000 0(
b1010 -(
b100000 +(
b100000 )(
b100000 '(
b100000 %(
b100000 #(
b100000 !(
b11 |'
b100 l'
b1 k'
b0 j'
b10 c'
b1000 b'
b100 a'
b0 `'
b101011 _'
b100011 ^'
b101000 ]'
b100000 \'
b1111 ['
b1110 Z'
b1101 Y'
b1100 X'
b1011 W'
b1010 V'
b1001 U'
b1000 T'
b111 S'
b110 R'
b101 Q'
b100 P'
b11 O'
b10 N'
b1 M'
b100000 /'
b100000 *'
b11 !'
b100000 ~&
b100000 }&
b100000 z&
b100000 u&
b100000 t&
b1010 q&
b100000 o&
b100000 m&
b100000 k&
b100000 i&
b100000 g&
b100000 e&
b11 b&
b100 R&
b1 Q&
b0 P&
b10 I&
b1000 H&
b100 G&
b0 F&
b101011 E&
b100011 D&
b101000 C&
b100000 B&
b1111 A&
b1110 @&
b1101 ?&
b1100 >&
b1011 =&
b1010 <&
b1001 ;&
b1000 :&
b111 9&
b110 8&
b101 7&
b100 6&
b11 5&
b10 4&
b1 3&
0!
0"
x#
x$
x%
bx &
bx '
bx (
x)
x*
x+
x,
x-
bx .
bx /
x0
x1
bx 2
bx 3
bx 4
x5
bx 6
bx 7
b0xxxxxxxxx 8
b0xxxxxxxxx 9
x:
x;
x<
x=
bx >
bx ?
bx @
bx A
bx B
bx C
bx D
bx E
bx F
bx G
bx H
bx I
bx J
bx K
bx L
bx M
bx N
bx O
bx P
bx Q
bx R
bx S
bx T
bx U
bx V
bx W
bx X
bx Y
bx Z
bx [
bx \
bx ]
bx ^
bx _
bx `
bx a
bx b
bx c
bx d
bx e
bx f
bx g
bx h
bx i
bx j
bx k
bx l
bx m
bx n
bx o
bx p
bx q
bx r
bx s
bx t
bx u
bx v
bx w
bx x
bx y
bx z
bx {
bx |
bx }
bx ~
bx !!
bx "!
bx #!
bx $!
bx %!
bx &!
bx '!
bx (!
bx )!
bx *!
bx +!
bx ,!
bx -!
bx .!
bx /!
bx 0!
bx 1!
bx 2!
bx 3!
bx 4!
bx 5!
bx 6!
bx 7!
bx 8!
bx 9!
bx :!
bx ;!
bx <!
bx =!
bx >!
bx ?!
bx @!
bx A!
bx B!
bx C!
bx D!
bx E!
bx F!
bx G!
bx H!
bx I!
bx J!
bx K!
bx L!
bx M!
bx N!
bx O!
bx P!
bx Q!
bx R!
bx S!
bx T!
bx U!
bx V!
bx W!
bx X!
bx Y!
bx Z!
bx [!
bx \!
bx ]!
bx ^!
bx _!
bx `!
bx a!
bx b!
bx c!
bx d!
bx e!
bx f!
bx g!
bx h!
bx i!
bx j!
bx k!
bx l!
bx m!
bx n!
bx o!
bx p!
bx q!
bx r!
bx s!
bx t!
bx u!
bx v!
bx w!
bx x!
bx y!
bx z!
bx {!
bx |!
bx }!
bx ~!
bx !"
bx ""
bx #"
bx $"
bx %"
bx &"
bx '"
bx ("
bx )"
bx *"
bx +"
bx ,"
bx -"
bx ."
bx /"
bx 0"
bx 1"
bx 2"
bx 3"
bx 4"
bx 5"
bx 6"
bx 7"
bx 8"
bx 9"
bx :"
bx ;"
bx <"
bx ="
bx >"
bx ?"
bx @"
bx A"
bx B"
bx C"
bx D"
bx E"
bx F"
bx G"
bx H"
bx I"
bx J"
bx K"
bx L"
bx M"
bx N"
bx O"
bx P"
bx Q"
bx R"
bx S"
bx T"
bx U"
bx V"
bx W"
bx X"
bx Y"
bx Z"
bx ["
bx \"
bx ]"
bx ^"
bx _"
bx `"
bx a"
bx b"
bx c"
bx d"
bx e"
bx f"
bx g"
bx h"
bx i"
bx j"
bx k"
bx l"
bx m"
bx n"
bx o"
b1100 p"
b101 q"
b11 r"
b10101100000001110000000000010100 s"
b10001100000001110000000000000000 t"
b1000000000000000000000001111 u"
b111000100011100000100010 v"
b110001010011100000100000 w"
b111000100011000000101010 x"
b10001100000001010000000000000000 y"
b10000110000000000000000000001 z"
b11001000011000000101010 {"
b10000101001110000000000001000 |"
b101001000010100000100000 }"
b11001000010100000100100 ~"
b111000100010000000100101 !#
b10001100000000110000000000010010 "#
b10001100000001110000000000010000 ##
b10001100000000100000000000010001 $#
bx %#
bx &#
bx '#
bx (#
bx )#
bx *#
bx +#
bx ,#
bx -#
bx .#
bx /#
bx 0#
bx 1#
bx 2#
bx 3#
bx 4#
bx 5#
bx 6#
bx 7#
bx 8#
bx 9#
bx :#
bx ;#
bx <#
bx =#
bx >#
bx ?#
bx @#
bx A#
bx B#
bx C#
bx D#
bx E#
bx F#
bx G#
bx H#
bx I#
bx J#
bx K#
bx L#
bx M#
bx N#
bx O#
bx P#
bx Q#
bx R#
bx S#
bx T#
bx U#
bx V#
bx W#
bx X#
bx Y#
bx Z#
bx [#
bx \#
bx ]#
bx ^#
bx _#
bx `#
bx a#
bx b#
bx c#
bx d#
bx e#
bx f#
bx g#
bx h#
bx i#
bx j#
bx k#
bx l#
bx m#
bx n#
bx o#
bx p#
bx q#
bx r#
bx s#
bx t#
bx u#
bx v#
bx w#
bx x#
bx y#
bx z#
bx {#
bx |#
bx }#
bx ~#
bx !$
bx "$
bx #$
bx $$
bx %$
bx &$
bx '$
bx ($
bx )$
bx *$
bx +$
bx ,$
bx -$
bx .$
bx /$
bx 0$
bx 1$
bx 2$
bx 3$
bx 4$
bx 5$
bx 6$
bx 7$
bx 8$
bx 9$
bx :$
bx ;$
bx <$
bx =$
bx >$
bx ?$
bx @$
bx A$
bx B$
bx C$
bx D$
bx E$
bx F$
bx G$
bx H$
bx I$
bx J$
bx K$
bx L$
bx M$
bx N$
bx O$
bx P$
bx Q$
bx R$
bx S$
bx T$
bx U$
bx V$
bx W$
bx X$
bx Y$
bx Z$
bx [$
bx \$
bx ]$
bx ^$
bx _$
bx `$
bx a$
bx b$
bx c$
bx d$
bx e$
bx f$
bx g$
bx h$
bx i$
bx j$
bx k$
bx l$
bx m$
bx n$
bx o$
bx p$
bx q$
bx r$
bx s$
bx t$
bx u$
bx v$
bx w$
bx x$
bx y$
bx z$
bx {$
bx |$
bx }$
bx ~$
bx !%
bx "%
bx #%
bx $%
bx %%
bx &%
bx '%
bx (%
bx )%
bx *%
bx +%
bx ,%
bx -%
bx .%
bx /%
bx 0%
bx 1%
bx 2%
bx 3%
bx 4%
bx 5%
bx 6%
bx 7%
bx 8%
bx 9%
bx :%
bx ;%
bx <%
bx =%
bx >%
bx ?%
bx @%
bx A%
bx B%
bx C%
bx D%
bx E%
bx F%
bx G%
bx H%
bx I%
bx J%
bx K%
bx L%
bx M%
bx N%
bx O%
bx P%
bx Q%
bx R%
bx S%
bx T%
bx U%
bx V%
bx W%
bx X%
bx Y%
bx Z%
bx [%
bx \%
bx ]%
bx ^%
bx _%
bx `%
bx a%
bx b%
bx c%
bx d%
bx e%
bx f%
bx g%
bx h%
bx i%
xj%
xk%
xl%
xm%
bx n%
xo%
xp%
xq%
xr%
xs%
bx t%
xu%
xv%
xw%
xx%
xy%
xz%
x{%
bx |%
bx }%
bx ~%
x!&
x"&
x#&
x$&
bx %&
bx &&
x'&
x(&
x)&
x*&
x+&
x,&
x-&
bx .&
bx /&
bx 0&
bx 1&
x2&
bx J&
bx K&
xL&
xM&
bx N&
bx O&
bx S&
bx T&
bx U&
bx V&
bx W&
bx X&
bx Y&
bx Z&
bx [&
bx \&
bx ]&
bx ^&
bx _&
bx `&
b0xxxxxxxxxxxxxxxx a&
bx c&
bx d&
bx f&
bx h&
bx j&
bx l&
bx n&
bx p&
bx r&
bx s&
b1 v&
bx w&
bx x&
bx y&
b0 {&
bx |&
bx "'
bx #'
bx $'
bx %'
bx &'
bx ''
bx ('
bx )'
bx +'
bx ,'
bx -'
b0x .'
bx 0'
x1'
x2'
x3'
x4'
x5'
x6'
x7'
bx 8'
bx 9'
bx :'
x;'
x<'
x='
x>'
bx ?'
bx @'
xA'
xB'
xC'
xD'
xE'
xF'
xG'
bx H'
bx I'
bx J'
bx K'
xL'
bx d'
bx e'
xf'
xg'
bx h'
bx i'
bx m'
bx n'
bx o'
bx p'
bx q'
bx r'
bx s'
bx t'
bx u'
bx v'
bx w'
bx x'
bx y'
bx z'
b0xxxxxxxxxxxxxxxx {'
bx }'
bx ~'
bx "(
bx $(
bx &(
bx ((
bx *(
bx ,(
bx .(
bx /(
b1 2(
bx 3(
bx 4(
bx 5(
b0 7(
bx 8(
bx <(
bx =(
bx >(
bx ?(
bx @(
bx A(
bx B(
bx C(
bx E(
bx F(
bx G(
b0x H(
$end
#500
1"
b0 $(
b0 h&
b1 d'
b1 J&
0s%
11
0*
b0 V&
b0 p'
b0 .(
b0 r&
b1 e'
b1000 K'
1f'
0g'
0F'
0G'
1A'
0B'
0C'
b1 I'
b0 J'
b0 H'
0E'
0D'
0L'
b101 K&
b1000 1&
1L&
0M&
0,&
0-&
1'&
0(&
0)&
b1 /&
b0 0&
b0 .&
0+&
0*&
02&
1y%
15'
0)
0w%
0x%
b0 }%
b0 |%
b1 ~%
0v%
0$
1#
0{%
0z%
1!&
0"&
0#&
0$&
00
03'
04'
b0 9'
b0 8'
b1 :'
02'
0,
1+
07'
06'
1;'
0<'
0='
0>'
1-
1%
15
b0 w'
b0 .
b0 ]&
b0 &
b0 2
0m%
0l%
0k%
0r%
0q%
0p%
b0 >
1=
1<
1;
0:
b10001100000000100000000000010001 6
b0 7
b0 8
b0 9
b10001100000000100000000000010001 4
b10001100000000100000000000010001 (
b10 O&
b1 y&
b10 i'
b1 5(
b1 x'
b10 ?'
b1 ^&
b10 %&
b1 ,'
b1 F(
b1 G(
b1 -'
b0 .'
b0 H(
b1 E(
b1 +'
b1 _&
b1 y'
01'
0u%
b1 |&
b1 8(
b1 q'
b1 W&
#1000
0"
#1500
1"
1!
b1 ,(
b10001100000000100000000000010001 &(
b1 p&
b10001100000000100000000000010001 j&
b1 $(
b1 h&
b10001100000000100000000000010001 "(
b10001100000000100000000000010001 f&
b101 J&
b10001100000000100000000000010001 t%
b10001100000000100000000000010001 0'
b1 V&
b1 p'
b10001100000000100000000000010001 X&
b1 `&
b10001100000000100000000000010001 r'
b1 z'
b1 /(
b1 u'
b1 s&
b1 [&
b1 .(
b1 w'
b1 r&
b1 ]&
b10001 h'
b100011 @'
b10001 3(
b0 ~'
b10 }'
b10 n'
b0 m'
b10001 {'
b10001 N&
b100011 &&
b10001 w&
b0 d&
b10 c&
b10 T&
b0 S&
b10001 a&
b10001 x&
b0 Y&
b10 U&
b10001 4(
b0 s'
b10 o'
b10 -'
b10 G(
b1 &
b1 .
b1 2
b1 >
b10001100000001110000000000010000 6
b10001100000001110000000000010000 4
b10001100000001110000000000010000 (
b110 K&
b0 1&
0L&
0'&
b11 /&
b10 +'
b10 E(
0y%
b10 y'
b10 _&
b11 ~%
0#
0!&
b10 8(
b10 |&
b10001 y&
b10001 ^&
b10 W&
b10 q'
b10001 ,'
b10010 -'
b10010 +'
b10010 _&
b10010 |&
b10010 W&
#2000
0"
#2500
1"
b10 ,(
b0 ((
b10001100000001110000000000010000 &(
b10010 p&
b0 l&
b10001100000001110000000000010000 j&
b10 $(
b10001100000001110000000000010000 "(
b110 J&
b10001100000001110000000000010000 0'
b10 p'
b10001100000001110000000000010000 X&
b0 \&
b10010 `&
b10001100000001110000000000010000 r'
b0 v'
b10 z'
b10 /(
b10 u'
b10010 s&
b10010 [&
b10 .(
b10 w'
b10000 h'
b10000 3(
b111 }'
b111 n'
b10000 {'
b10000 4(
b111 o'
b11 G(
b10 .
b111 K&
b10 /&
1)&
b11 E(
b11 y'
1v%
b10 ~%
b0 ]&
b10001 -'
b11 8(
b10001 +'
b10001 _&
b11 q'
b10001 |&
b10001 W&
#3000
0"
#3500
1"
b11 ,(
b10001 p&
b11 $(
b111 J&
b11 p'
b10001 `&
b11 z'
b11 /(
b11 u'
b10001 s&
b10001 [&
b11 .(
b11 w'
b100 G(
b11 .
b1000 K&
0)&
b0 /&
1'&
1+&
b100 E(
b100 y'
1x%
1#
b0 ~%
0v%
b1 ]&
b10001 &
b10001 2
b10010 -'
b10001 >
b101 6
b101 4
b101 (
b100 8(
bx y&
b10010 +'
b10010 _&
bx ^&
b100 q'
bx ,'
bx -'
b0x .'
b10010 |&
bx +'
bx _&
b10010 W&
xu%
bx |&
bx W&
#4000
0"
#4500
1"
b100 ,(
b101 &(
bx p&
b101 j&
b100 $(
b101 "(
b1000 J&
b101 0'
b100 p'
b101 X&
bx `&
b101 r'
b100 z'
b100 /(
b100 u'
bx s&
bx [&
b100 .(
b100 w'
b101 h'
b0 @'
b101 3(
b0 }'
b0 n'
b101 {'
b101 4(
b0 t'
b0 o'
b101 G(
bx &
b100 .
bx 2
bx >
x=
x<
x;
x:
b0x0x 4
bx 6
bx 7
b0xxxxxxxxx 8
b0xxxxxxxxx 9
bx 4
b0x0x (
bx (
b1 K&
0'&
0+&
1,&
1*&
b101 E(
b101 y'
1w%
1z%
0x%
0#
b1 &
b101 [&
b1 2
b1 >
1=
1<
1;
0:
b10001100000001110000000000010000 6
b0 7
b0 8
b0 9
b10001100000001110000000000010000 4
b10001100000001110000000000010000 (
b101 8(
b101 q'
#5000
0"
#5500
1"
b101 ''
b101 ,(
b0 *(
b10001100000001110000000000010000 &(
b10001100000001110000000000010000 j&
b101 $(
b10001100000001110000000000010000 "(
b1 J&
b101 Z&
b10001100000001110000000000010000 0'
b101 p'
b10001100000001110000000000010000 X&
b10001100000001110000000000010000 r'
b0 /
b101 z'
b101 /(
b101 u'
b10001100000001110000000000010000 [&
b101 .(
b101 w'
b10000 h'
b100011 @'
b10000 3(
b111 }'
b111 n'
b10000 {'
b10000 4(
bx t'
b111 o'
b110 G(
b101 .
b101 K&
0,&
0*&
1'&
b1000 1&
b1 /&
1L&
b110 E(
1y%
b110 y'
b1 ~%
1!&
1#
0w%
0z%
bx [&
b110 8(
b1 y&
b1 ^&
b110 q'
b1 ,'
b10 -'
b0 .'
b10 +'
b10 _&
0u%
b10 |&
b10 W&
#6000
0"
#6500
1"
b110 ,(
bx *(
b10 p&
b101 n&
b110 $(
b10 h&
b10001100000001110000000000010000 f&
b101 J&
b10001100000001110000000000010000 t%
b10 V&
b110 p'
b101 '
b10 `&
bx /
b110 z'
b110 /(
b110 u'
b10 s&
b10 [&
b101 3
b110 .(
b110 w'
b10 r&
b10 ]&
b10000 N&
b10000 w&
b111 c&
b111 T&
b10000 a&
b10000 x&
bx Z&
b111 U&
b11 -'
b111 G(
b10 &
b110 .
b10 2
b10 >
b10001100000000110000000000010010 6
b10001100000000110000000000010010 4
b10001100000000110000000000010010 (
b110 K&
b0 1&
0L&
0'&
b11 /&
b11 +'
b111 E(
0y%
b111 y'
b11 _&
b11 ~%
0#
0!&
b111 8(
b11 |&
b10000 y&
b10000 ^&
b11 W&
b111 q'
b10000 ,'
b10010 -'
b10010 +'
b10010 _&
b10010 |&
b10010 W&
#7000
0"
#7500
1"
b111 ,(
b10001100000000110000000000010010 &(
b10010 p&
bx n&
b10001100000000110000000000010010 j&
b111 $(
b10001100000000110000000000010010 "(
b110 J&
b10001100000000110000000000010010 0'
b111 p'
b10001100000000110000000000010010 X&
bx '
b10010 `&
b10001100000000110000000000010010 r'
b111 z'
b111 /(
b111 u'
b10010 s&
bx 3
b10010 [&
b111 .(
b111 w'
b10010 h'
b10010 3(
b11 }'
b11 n'
b10010 {'
b10010 4(
b11 o'
b1000 G(
b111 .
b111 K&
b10 /&
1)&
b1000 E(
b1000 y'
1v%
b10 ~%
b0 ]&
b10000 -'
b1000 8(
b10000 +'
b10000 _&
b1000 q'
b10000 |&
b10000 W&
#8000
0"
#8500
1"
b1000 ,(
b10000 p&
b1000 $(
b111 J&
b1000 p'
b10000 `&
b1000 z'
b1000 /(
b1000 u'
b10000 s&
b10000 [&
b1000 .(
b1000 w'
b1001 G(
b1000 .
b1000 K&
0)&
b0 /&
1'&
1+&
b1001 E(
b1001 y'
1x%
1#
b0 ~%
0v%
b10 ]&
b10000 &
b10000 2
b10010 -'
b10000 >
b11 6
b11 4
b11 (
b1001 8(
bx y&
b10010 +'
b10010 _&
bx ^&
b1001 q'
bx ,'
bx -'
b0x .'
b10010 |&
bx +'
bx _&
b10010 W&
xu%
bx |&
bx W&
#9000
0"
#9500
1"
b1001 ,(
b11 &(
bx p&
b11 j&
b1001 $(
b11 "(
b1000 J&
b11 0'
b1001 p'
b11 X&
bx `&
b11 r'
b1001 z'
b1001 /(
b1001 u'
bx s&
bx [&
b1001 .(
b1001 w'
b11 h'
b0 @'
b11 3(
b0 }'
b0 n'
b11 {'
b11 4(
b0 t'
b0 o'
b1010 G(
bx &
b1001 .
bx 2
bx >
x=
x<
x;
x:
b0xx 4
bx 6
bx 7
b0xxxxxxxxx 8
b0xxxxxxxxx 9
bx 4
b0xx (
bx (
b1 K&
0'&
0+&
1,&
1*&
b1010 E(
b1010 y'
1w%
1z%
0x%
0#
b10 &
b11 [&
b10 2
b10 >
1=
1<
1;
0:
b10001100000000110000000000010010 6
b0 7
b0 8
b0 9
b10001100000000110000000000010010 4
b10001100000000110000000000010010 (
b1010 8(
b1010 q'
#10000
0"
#10500
1"
b11 "'
b1010 ,(
b0 *(
b10001100000000110000000000010010 &(
b10001100000000110000000000010010 j&
b1010 $(
b10001100000000110000000000010010 "(
b1 J&
b11 Z&
b10001100000000110000000000010010 0'
b1010 p'
b10001100000000110000000000010010 X&
b10001100000000110000000000010010 r'
b0 /
b1010 z'
b1010 /(
b1010 u'
b10001100000000110000000000010010 [&
b1010 .(
b1010 w'
b10010 h'
b100011 @'
b10010 3(
b11 }'
b11 n'
b10010 {'
b10010 4(
bx t'
b11 o'
b1011 G(
b1010 .
b101 K&
0,&
0*&
1'&
b1000 1&
b1 /&
1L&
b1011 E(
1y%
b1011 y'
b1 ~%
1!&
1#
0w%
0z%
bx [&
b1011 8(
b1 y&
b1 ^&
b1011 q'
b1 ,'
b11 -'
b0 .'
b11 +'
b11 _&
0u%
b11 |&
b11 W&
#11000
0"
#11500
1"
b1011 ,(
bx *(
b11 p&
b11 n&
b1011 $(
b11 h&
b10001100000000110000000000010010 f&
b101 J&
b10001100000000110000000000010010 t%
b11 V&
b1011 p'
b11 '
b11 `&
bx /
b1011 z'
b1011 /(
b1011 u'
b11 s&
b11 [&
b11 3
b1011 .(
b1011 w'
b11 r&
b11 ]&
b10010 N&
b10010 w&
b11 c&
b11 T&
b10010 a&
b10010 x&
bx Z&
b11 U&
b100 -'
b1100 G(
b11 &
b1011 .
b11 2
b11 >
b111000100010000000100101 6
b111000100010000000100101 4
b111000100010000000100101 (
b110 K&
b0 1&
0L&
0'&
b11 /&
b100 +'
b1100 E(
0y%
b1100 y'
b100 _&
b11 ~%
0#
0!&
b1100 8(
b100 |&
b10010 y&
b10010 ^&
b100 W&
b1100 q'
b10010 ,'
b10101 -'
b10101 +'
b10101 _&
b10101 |&
b10101 W&
#12000
0"
#12500
1"
b1100 ,(
b111000100010000000100101 &(
b10101 p&
bx n&
b111000100010000000100101 j&
b1100 $(
b111000100010000000100101 "(
b110 J&
b111000100010000000100101 0'
b1100 p'
b111000100010000000100101 X&
bx '
b10101 `&
b111000100010000000100101 r'
b1100 z'
b1100 /(
b1100 u'
b10101 s&
bx 3
b10101 [&
b1100 .(
b1100 w'
b100101 h'
b0 @'
b10000000100101 3(
b100 ~'
b10 }'
b10 n'
b111 m'
b10000000100101 {'
b10000000100101 4(
bx s'
b10 o'
b1101 G(
b1100 .
b111 K&
b10 /&
1)&
b1101 E(
b1101 y'
1v%
b10 ~%
b0 ]&
b10010 -'
b1101 8(
b10010 +'
b10010 _&
b1101 q'
b10010 |&
b10010 W&
#13000
0"
#13500
1"
b1101 ,(
bx ((
b10010 p&
b1101 $(
b111 J&
b1101 p'
b10010 `&
bx v'
b1101 z'
b1101 /(
b1101 u'
b10010 s&
b10010 [&
b1101 .(
b1101 w'
b1110 G(
b1101 .
b1000 K&
0)&
b0 /&
1'&
1+&
b1110 E(
b1110 y'
1x%
1#
b0 ~%
0v%
b11 ]&
b10010 &
b10010 2
b10101 -'
b10010 >
b1100 6
b1100 4
b1100 (
b1110 8(
bx y&
b10101 +'
b10101 _&
bx ^&
b1110 q'
bx ,'
bx -'
b0x .'
b10101 |&
bx +'
bx _&
b10101 W&
xu%
bx |&
bx W&
#14000
0"
#14500
1"
b1110 ,(
b1100 &(
bx p&
b1100 j&
b1110 $(
b1100 "(
b1000 J&
b1100 0'
b1110 p'
b1100 X&
bx `&
b1100 r'
b1110 z'
b1110 /(
b1110 u'
bx s&
bx [&
b1110 .(
b1110 w'
b1100 h'
b1100 3(
b0 ~'
b0 }'
b0 n'
b0 m'
b1100 {'
b1100 4(
b0 s'
b0 t'
b0 o'
b1111 G(
bx &
b1110 .
bx 2
bx >
x=
x<
x;
x:
b0xx00 4
bx 6
bx 7
b0xxxxxxxxx 8
b0xxxxxxxxx 9
bx 4
b0xx00 (
bx (
b1 K&
0'&
0+&
1,&
1*&
b1111 E(
b1111 y'
1w%
1z%
0x%
0#
b11 &
b1100 [&
b11 2
b11 >
1=
1<
1;
0:
b111000100010000000100101 6
b0 7
b0 8
b0 9
b111000100010000000100101 4
b111000100010000000100101 (
b1111 8(
b1111 q'
#15000
0"
#15500
1"
b1100 &'
b1111 ,(
b0 *(
b0 ((
b111000100010000000100101 &(
b111000100010000000100101 j&
b1111 $(
b111000100010000000100101 "(
b1 J&
b1100 Z&
b111000100010000000100101 0'
b1111 p'
b111000100010000000100101 X&
b111000100010000000100101 r'
b0 v'
b0 /
b1111 z'
b1111 /(
b1111 u'
b111000100010000000100101 [&
b1111 .(
b1111 w'
b100101 h'
b10000000100101 3(
b100 ~'
b10 }'
b10 n'
b111 m'
b10000000100101 {'
b10000000100101 4(
bx s'
bx t'
b10 o'
b10000 G(
b1111 .
b101 K&
0,&
0*&
1'&
b1000 1&
b1 /&
1L&
b10000 E(
1y%
b10000 y'
b1 ~%
1!&
1#
0w%
0z%
bx [&
b10000 8(
b1 y&
b1 ^&
b10000 q'
b1 ,'
b100 -'
b0 .'
b100 +'
b100 _&
0u%
b100 |&
b100 W&
#16000
0"
#16500
1"
b10000 ,(
bx *(
bx ((
b100 p&
b1100 n&
b10000 $(
b100 h&
b111000100010000000100101 f&
b101 J&
b111000100010000000100101 t%
b100 V&
b10000 p'
b1100 '
b100 `&
bx v'
bx /
b10000 z'
b10000 /(
b10000 u'
b100 s&
b100 [&
b1100 3
b10000 .(
b10000 w'
b100 r&
b100 ]&
b100101 N&
b0 &&
b10000000100101 w&
b100 d&
b10 c&
b10 T&
b111 S&
b10000000100101 a&
b10000000100101 x&
b11 Y&
b101 Z&
b10 U&
b101 -'
b10001 G(
b100 &
b10000 .
b100 2
b100 >
b11001000010100000100100 6
b11001000010100000100100 4
b11001000010100000100100 (
b1010 K&
b0 1&
0L&
0'&
b11 /&
b101 +'
b10001 E(
0y%
b10001 y'
b101 _&
b11 ~%
0#
0!&
b10001 8(
b101 |&
b10000000100101 y&
b10000000100101 ^&
b101 W&
b10001 q'
b10000000100101 ,'
b10000000101001 -'
b10000000101001 +'
b10000000101001 _&
b10000000101001 |&
b10000000101001 W&
#17000
0"
#17500
1"
b10001 ,(
b11001000010100000100100 &(
b10000000101001 p&
b101 n&
b11 l&
b11001000010100000100100 j&
b10001 $(
b11001000010100000100100 "(
b1010 J&
b11001000010100000100100 0'
b10001 p'
b11001000010100000100100 X&
b11 \&
b101 '
b10000000101001 `&
b11001000010100000100100 r'
b10001 z'
b10001 /(
b10001 u'
b101001 s&
b101 3
b10000000101001 [&
b10001 .(
b10001 w'
b100100 h'
b10100000100100 3(
b101 ~'
b100 }'
b100 n'
b11 m'
b10100000100100 {'
b10100000100100 4(
b100 o'
b10010 G(
b10001 .
b1011 K&
b0 /&
1)&
b10 0&
b10010 E(
b10010 y'
b10 |%
1v%
b0 ~%
b11 ]&
b10000000101000 -'
b10010 8(
b1 O&
b101 y&
b10000000101000 +'
b10000000101000 _&
b101 ^&
b1 %&
b10010 q'
b101 ,'
b1000 -'
b10000000101000 |&
b111 +'
b111 _&
b10000000101000 W&
b111 |&
b111 W&
#18000
0"
#18500
1"
b10010 ,(
b111 p&
b10010 $(
b1011 J&
b10010 p'
b111 `&
b10010 z'
b10010 /(
b10010 u'
b111 s&
b111 [&
b10010 .(
b10010 w'
b10011 G(
b10010 .
b1 K&
0)&
b0 0&
1-&
1,&
b10011 E(
b10011 y'
1z%
1{%
b0 |%
0v%
b100 ]&
b100 U&
b1001 -'
b10011 8(
b10 O&
b101 +'
b101 _&
b10 %&
b10011 q'
b101 |&
b1001 +'
b1001 _&
b101 W&
b1001 |&
b1001 W&
#19000
0"
#19500
1"
b111 %'
b10011 ,(
b1001 p&
b10011 $(
b1 J&
b10011 p'
b1001 `&
b10011 z'
b10011 /(
b10011 u'
b1001 s&
b1001 [&
b10011 .(
b10011 w'
b10100 G(
b10011 .
b101 K&
0,&
0-&
1'&
b1000 1&
b1 /&
1L&
b10100 E(
1y%
b10100 y'
b1 ~%
1!&
1#
0{%
0z%
b10 U&
b10100 8(
b1 y&
b1 ^&
b10100 q'
b1 ,'
b101 -'
b101 +'
b101 _&
b101 |&
b101 W&
#20000
0"
#20500
1"
b10100 ,(
b101 p&
b10100 $(
b101 h&
b11001000010100000100100 f&
b101 J&
b11001000010100000100100 t%
b101 V&
b10100 p'
b101 `&
b10100 z'
b10100 /(
b10100 u'
b101 s&
b101 [&
b10100 .(
b10100 w'
b101 r&
b101 ]&
b100100 N&
b10100000100100 w&
b101 d&
b100 c&
b100 T&
b11 S&
b10100000100100 a&
b10100000100100 x&
b1100 Y&
b111 Z&
b100 U&
b110 -'
b10101 G(
b101 &
b10100 .
b101 2
b101 >
b101001000010100000100000 6
b101001000010100000100000 4
b101001000010100000100000 (
b1010 K&
b0 1&
0L&
0'&
b11 /&
b110 +'
b10101 E(
0y%
b10101 y'
b110 _&
b11 ~%
0#
0!&
b10101 8(
b110 |&
b10100000100100 y&
b10100000100100 ^&
b110 W&
b10101 q'
b10100000100100 ,'
b10100000101001 -'
b10100000101001 +'
b10100000101001 _&
b10100000101001 |&
b10100000101001 W&
#21000
0"
#21500
1"
b10101 ,(
b101001000010100000100000 &(
b10100000101001 p&
b111 n&
b1100 l&
b101001000010100000100000 j&
b10101 $(
b101001000010100000100000 "(
b1010 J&
b101001000010100000100000 0'
b10101 p'
b101001000010100000100000 X&
b1100 \&
b111 '
b10100000101001 `&
b101001000010100000100000 r'
b10101 z'
b10101 /(
b10101 u'
b101001 s&
b111 3
b10100000101001 [&
b10101 .(
b10101 w'
b100000 h'
b10100000100000 3(
b101 m'
b10100000100000 {'
b10100000100000 4(
b10110 G(
b10101 .
b1011 K&
b0 /&
1)&
b10 0&
b10110 E(
b10110 y'
b10 |%
1v%
b0 ~%
b1100 ]&
b10100000110000 -'
b10110 8(
b0 O&
b111 y&
b10100000110000 +'
b10100000110000 _&
b111 ^&
b0 %&
b10110 q'
b111 ,'
b10011 -'
b10100000110000 |&
b100 +'
b100 _&
b10100000110000 W&
b100 |&
b100 W&
#22000
0"
#22500
1"
b10110 ,(
b100 p&
b10110 $(
b1011 J&
b10110 p'
b100 `&
b10110 z'
b10110 /(
b10110 u'
b100 s&
b100 [&
b10110 .(
b10110 w'
b10111 G(
b10110 .
b1 K&
0)&
b0 0&
1-&
1,&
b10111 E(
b10111 y'
1z%
1{%
b0 |%
0v%
b101 ]&
b101 U&
b1100 -'
b10111 8(
b10 O&
b101 +'
b101 _&
b10 %&
b10111 q'
b101 |&
b1100 +'
b1100 _&
b101 W&
b1100 |&
b1100 W&
#23000
0"
#23500
1"
b100 $'
b10111 ,(
b1100 p&
b10111 $(
b1 J&
b10111 p'
b1100 `&
b10111 z'
b10111 /(
b10111 u'
b1100 s&
b1100 [&
b10111 .(
b10111 w'
b11000 G(
b10111 .
b101 K&
0,&
0-&
1'&
b1000 1&
b1 /&
1L&
b11000 E(
1y%
b11000 y'
b1 ~%
1!&
1#
0{%
0z%
b100 U&
b11000 8(
b1 y&
b1 ^&
b11000 q'
b1 ,'
b110 -'
b110 +'
b110 _&
b110 |&
b110 W&
#24000
0"
#24500
1"
b11000 ,(
b110 p&
b11000 $(
b110 h&
b101001000010100000100000 f&
b101 J&
b101001000010100000100000 t%
b110 V&
b11000 p'
b110 `&
b11000 z'
b11000 /(
b11000 u'
b110 s&
b110 [&
b11000 .(
b11000 w'
b110 r&
b110 ]&
b100000 N&
b10100000100000 w&
b101 S&
b10100000100000 a&
b10100000100000 x&
b100 Y&
b111 -'
b11001 G(
b110 &
b11000 .
b110 2
b110 >
b10000101001110000000000001000 6
b10000101001110000000000001000 4
b10000101001110000000000001000 (
b1010 K&
b0 1&
0L&
0'&
b11 /&
b111 +'
b11001 E(
0y%
b11001 y'
b111 _&
b11 ~%
0#
0!&
b11001 8(
b111 |&
b10100000100000 y&
b10100000100000 ^&
b111 W&
b11001 q'
b10100000100000 ,'
b10100000100110 -'
b10100000100110 +'
b10100000100110 _&
b10100000100110 |&
b10100000100110 W&
#25000
0"
#25500
1"
b11001 ,(
b10000101001110000000000001000 &(
b10100000100110 p&
b100 l&
b10000101001110000000000001000 j&
b11001 $(
b10000101001110000000000001000 "(
b1010 J&
b10000101001110000000000001000 0'
b11001 p'
b10000101001110000000000001000 X&
b100 \&
b10100000100110 `&
b10000101001110000000000001000 r'
b11001 z'
b11001 /(
b11001 u'
b100110 s&
b10100000100110 [&
b11001 .(
b11001 w'
b1000 h'
b100 @'
b1000 3(
b0 ~'
b111 }'
b111 n'
b1000 {'
b1000 4(
b111 o'
b11010 G(
b11001 .
b1011 K&
b0 /&
1)&
b10 0&
b11010 E(
b11010 y'
b10 |%
1v%
b0 ~%
b100 ]&
b10100000100100 -'
b11010 8(
b111 y&
b10100000100100 +'
b10100000100100 _&
b111 ^&
b11010 q'
b111 ,'
b1011 -'
b10100000100100 |&
b1011 +'
b1011 _&
b10100000100100 W&
b1011 |&
b1011 W&
#26000
0"
#26500
1"
b11010 ,(
b1011 p&
b11010 $(
b1011 J&
b11010 p'
b1011 `&
b11010 z'
b11010 /(
b11010 u'
b1011 s&
b1011 [&
b11010 .(
b11010 w'
b11011 G(
b11010 .
b1 K&
0)&
b0 0&
1-&
1,&
b11011 E(
b11011 y'
1z%
1{%
b0 |%
0v%
b110 ]&
b101 U&
b1101 -'
b11011 8(
b1101 +'
b1101 _&
b11011 q'
b1101 |&
b1101 W&
#27000
0"
#27500
1"
b1011 $'
b11011 ,(
b1101 p&
b11011 $(
b1 J&
b1011 Y&
b11011 p'
b1101 `&
b11011 z'
b11011 /(
b11011 u'
b1101 s&
b1101 [&
b11011 .(
b11011 w'
b11100 G(
b11011 .
b101 K&
0,&
0-&
1'&
b1000 1&
b1 /&
1L&
b11100 E(
1y%
b11100 y'
b1 ~%
1!&
1#
0{%
0z%
b100 U&
b11100 8(
b1 y&
b1 ^&
b11100 q'
b1 ,'
b111 -'
b111 +'
b111 _&
b111 |&
b111 W&
#28000
0"
#28500
1"
b11100 ,(
b111 p&
b1011 l&
b11100 $(
b111 h&
b10000101001110000000000001000 f&
b101 J&
b10000101001110000000000001000 t%
b111 V&
b11100 p'
b1011 \&
b111 `&
b11100 z'
b11100 /(
b11100 u'
b111 s&
b111 [&
b11100 .(
b11100 w'
b111 r&
b111 ]&
b1000 N&
b100 &&
b1000 w&
b0 d&
b111 c&
b111 T&
b1000 a&
b1000 x&
b11 Z&
b111 U&
b1000 -'
b11101 G(
b111 &
b11100 .
b111 2
b111 >
b11001000011000000101010 6
b11001000011000000101010 4
b11001000011000000101010 (
b1100 K&
b0 1&
0L&
0'&
b11 /&
b1000 +'
b11101 E(
0y%
b11101 y'
b1000 _&
b11 ~%
0#
0!&
b11101 8(
b1000 |&
b1000 y&
b1000 ^&
b1000 W&
b11101 q'
b1000 ,'
b1111 -'
b1111 +'
b1111 _&
b1111 |&
b1111 W&
#29000
0"
#29500
1"
b11101 ,(
b11001000011000000101010 &(
b1111 p&
b11 n&
b11001000011000000101010 j&
b11101 $(
b11001000011000000101010 "(
b1100 J&
b11001000011000000101010 0'
b11101 p'
b11001000011000000101010 X&
b11 '
b1111 `&
b11001000011000000101010 r'
b11101 z'
b11101 /(
b11101 u'
b1111 s&
b11 3
b1111 [&
b11101 .(
b11101 w'
b101010 h'
b0 @'
b11000000101010 3(
b110 ~'
b100 }'
b100 n'
b11 m'
b11000000101010 {'
b11000000101010 4(
b100 o'
b11110 G(
b11101 .
b1 K&
b0 /&
1)&
b1 0&
1M&
b1 .&
b11110 E(
b11110 y'
b1 }%
b1 |%
1v%
b0 ~%
b1011 ]&
b10011 -'
b11110 8(
b110 O&
b11 y&
b10011 +'
b10011 _&
b11 ^&
b110 %&
b11110 q'
b10100 -'
b11111111111111111111111111111100 ,'
b1000 -'
b1000 +'
b1000 _&
#30000
0"
#30500
1"
b11110 ,(
b1000 p&
b11110 $(
b1 J&
b11110 p'
b1000 `&
b11110 z'
b11110 /(
b11110 u'
b1000 s&
b1000 [&
b11110 .(
b11110 w'
b11111 G(
b11110 .
b101 K&
0M&
0)&
b0 0&
b0 .&
1'&
b1000 1&
b1 /&
1L&
b1000 |&
b11111 E(
1y%
b11111 y'
b1000 W&
b1 ~%
1!&
1#
b0 }%
b0 |%
0v%
b111 ]&
b100 -'
b11111 8(
b1 y&
b10 O&
b100 +'
b100 _&
b10 %&
b1 ^&
b11111 q'
b1 ,'
b11 -'
b1000 -'
b100 |&
b1000 +'
b1000 _&
b100 W&
b1000 |&
b1000 W&
#31000
0"
#31500
1"
b11111 ,(
b11111 $(
b1000 h&
b11001000011000000101010 f&
b101 J&
b11001000011000000101010 t%
b1000 V&
b11111 p'
b11111 z'
b11111 /(
b11111 u'
b11111 .(
b11111 w'
b1000 r&
b1000 ]&
b101010 N&
b0 &&
b11000000101010 w&
b110 d&
b100 c&
b100 T&
b11 S&
b11000000101010 a&
b11000000101010 x&
b1100 Y&
b111 Z&
b100 U&
b1001 -'
b1000 &
b100000 G(
b11111 .
b1000 2
b1000 >
b10000110000000000000000000001 6
b10000110000000000000000000001 4
b10000110000000000000000000001 (
b1010 K&
b0 1&
0L&
0'&
b11 /&
b1001 +'
b100000 E(
0y%
b100000 y'
b1001 _&
b11 ~%
0#
0!&
b100000 8(
b1001 |&
b11000000101010 y&
b11000000101010 ^&
b1001 W&
b100000 q'
b11000000101010 ,'
b11000000110010 -'
b11000000110010 +'
b11000000110010 _&
b11000000110010 |&
b11000000110010 W&
#32000
0"
#32500
1"
b100000 ,(
b10000110000000000000000000001 &(
b11000000110010 p&
b111 n&
b1100 l&
b10000110000000000000000000001 j&
b100000 $(
b10000110000000000000000000001 "(
b1010 J&
b10000110000000000000000000001 0'
b100000 p'
b10000110000000000000000000001 X&
b1100 \&
b111 '
b11000000110010 `&
b10000110000000000000000000001 r'
b100000 z'
b100000 /(
b100000 u'
b110010 s&
b111 3
b11000000110010 [&
b100000 .(
b100000 w'
b1 h'
b100 @'
b1 3(
b0 ~'
b0 }'
b0 n'
b110 m'
b1 {'
b1 4(
b0 t'
b0 o'
b100001 G(
b100000 .
b1011 K&
b0 /&
1)&
b10 0&
b100001 E(
b100001 y'
b10 |%
1v%
b0 ~%
b1100 ]&
b11000000110110 -'
b100001 8(
b111 O&
b111 y&
b11000000110110 +'
b11000000110110 _&
b111 ^&
b111 %&
b100001 q'
b11000000110111 -'
b11111111111111111111111111111000 ,'
b101 -'
b11000000110110 |&
b0 +'
b0 _&
b11000000110110 W&
1u%
b0 |&
b0 W&
#33000
0"
#33500
1"
b100001 ,(
b0 *(
b0 p&
b100001 $(
b1011 J&
b100001 p'
b0 `&
b0 /
b100001 z'
b100001 /(
b100001 u'
b0 s&
b0 [&
b100001 .(
b100001 w'
b100010 G(
b100001 .
b1 K&
0)&
b0 0&
1-&
1,&
b100010 E(
b100010 y'
1z%
1{%
b0 |%
0v%
b1000 ]&
b110 U&
b1 -'
b100010 8(
b10 O&
b10 %&
b100010 q'
b111 ,'
b0 -'
b1111 -'
b1111 +'
b1111 _&
0u%
b1111 |&
b1111 W&
#34000
0"
#34500
1"
b0 #'
b100010 ,(
b1111 p&
b100010 $(
b1 J&
b100010 p'
b1111 `&
b100010 z'
b100010 /(
b100010 u'
b1111 s&
b1111 [&
b100010 .(
b100010 w'
b100011 G(
b100010 .
b101 K&
0,&
0-&
1'&
b1000 1&
b1 /&
1L&
b100011 E(
1y%
b100011 y'
b1 ~%
1!&
1#
0{%
0z%
b100 U&
b100011 8(
b1 y&
b1 ^&
b100011 q'
b1 ,'
b1001 -'
b1001 +'
b1001 _&
b1001 |&
b1001 W&
#35000
0"
#35500
1"
b100011 ,(
b1001 p&
b100011 $(
b1001 h&
b10000110000000000000000000001 f&
b101 J&
b10000110000000000000000000001 t%
b1001 V&
b100011 p'
b1001 `&
b100011 z'
b100011 /(
b100011 u'
b1001 s&
b1001 [&
b100011 .(
b100011 w'
b1001 r&
b1001 ]&
b1 N&
b100 &&
b1 w&
b0 d&
b0 c&
b0 T&
b110 S&
b1 a&
b1 x&
b0 Y&
b0 Z&
b0 U&
b1010 -'
b100100 G(
b1001 &
b100011 .
b1001 2
b1001 >
b10001100000001010000000000000000 6
b10001100000001010000000000000000 4
b10001100000001010000000000000000 (
b1100 K&
b0 1&
0L&
0'&
b11 /&
b1010 +'
b100100 E(
0y%
b100100 y'
b1010 _&
b11 ~%
0#
0!&
b100100 8(
b1010 |&
b1010 W&
b100100 q'
#36000
0"
#36500
1"
b100100 ,(
b10001100000001010000000000000000 &(
b1010 p&
b0 n&
b0 l&
b10001100000001010000000000000000 j&
b100100 $(
b10001100000001010000000000000000 "(
b1100 J&
b10001100000001010000000000000000 0'
b100100 p'
b10001100000001010000000000000000 X&
b0 \&
b0 '
b1010 `&
b10001100000001010000000000000000 r'
b100100 z'
b100100 /(
b100100 u'
b1010 s&
b0 3
b1010 [&
b100100 .(
b100100 w'
b0 h'
b100011 @'
b0 3(
b101 }'
b101 n'
b0 m'
b0 {'
b0 4(
b0 s'
bx t'
b101 o'
b100101 G(
b100100 .
b1 K&
b0 /&
1)&
b1 0&
1M&
b1 .&
b100101 E(
b100101 y'
b1 }%
b1 |%
1v%
b0 ~%
b0 ]&
b1 -'
b100101 8(
b110 O&
b0 y&
b1 +'
b1 _&
b0 ^&
b110 %&
b100101 q'
b10 -'
b11111111111111111111111111111111 ,'
b0 -'
b0 +'
b0 _&
1u%
1y%
#37000
0"
#37500
1"
b100101 ,(
bx *(
b0 ((
b0 p&
b100101 $(
b1010 h&
b1 J&
b1010 V&
b100101 p'
b0 `&
b0 v'
bx /
b100101 z'
b100101 /(
b100101 u'
b0 s&
b0 [&
b100101 .(
b100101 w'
b1010 r&
b100110 G(
b1010 &
b100101 .
b1010 2
b1010 >
b111000100011000000101010 6
b111000100011000000101010 4
b111000100011000000101010 (
b101 K&
0M&
0)&
b0 0&
b0 .&
1'&
b1000 1&
b1 /&
1L&
b0 |&
b100110 E(
b100110 y'
b0 W&
b1 ~%
1!&
1#
b0 }%
b0 |%
0v%
b1010 ]&
b1010 -'
b100110 8(
b1 y&
b10 O&
b1010 +'
b1010 _&
b10 %&
b1 ^&
b100110 q'
b1 ,'
b1001 -'
0u%
b1011 -'
b1010 |&
b1011 +'
b1011 _&
b1010 W&
b1011 |&
b1011 W&
#38000
0"
#38500
1"
b100110 ,(
b111000100011000000101010 &(
b1011 p&
b111000100011000000101010 j&
b100110 $(
b1011 h&
b111000100011000000101010 "(
b111000100011000000101010 f&
b101 J&
b111000100011000000101010 t%
b111000100011000000101010 0'
b1011 V&
b100110 p'
b111000100011000000101010 X&
b1011 `&
b111000100011000000101010 r'
b100110 z'
b100110 /(
b100110 u'
b1011 s&
b1011 [&
b100110 .(
b100110 w'
b1011 r&
b1011 ]&
b101010 h'
b0 @'
b11000000101010 3(
b110 ~'
b10 }'
b10 n'
b111 m'
b11000000101010 {'
b101010 N&
b0 &&
b11000000101010 w&
b110 d&
b10 c&
b10 T&
b111 S&
b11000000101010 a&
b11000000101010 x&
b11 Y&
b101 Z&
b10 U&
b11000000101010 4(
bx s'
b10 o'
b1100 -'
b100111 G(
b1011 &
b100110 .
b1011 2
b1011 >
b110001010011100000100000 6
b110001010011100000100000 4
b110001010011100000100000 (
b1010 K&
b0 1&
0L&
0'&
b11 /&
b1100 +'
b100111 E(
0y%
b100111 y'
b1100 _&
b11 ~%
0#
0!&
b100111 8(
b1100 |&
b11000000101010 y&
b11000000101010 ^&
b1100 W&
b100111 q'
b11000000101010 ,'
b11000000110101 -'
b11000000110101 +'
b11000000110101 _&
b11000000110101 |&
b11000000110101 W&
#39000
0"
#39500
1"
b100111 ,(
bx ((
b110001010011100000100000 &(
b11000000110101 p&
b101 n&
b11 l&
b110001010011100000100000 j&
b100111 $(
b110001010011100000100000 "(
b1010 J&
b110001010011100000100000 0'
b100111 p'
b110001010011100000100000 X&
b11 \&
b101 '
b11000000110101 `&
b110001010011100000100000 r'
bx v'
b100111 z'
b100111 /(
b100111 u'
b110101 s&
b101 3
b11000000110101 [&
b100111 .(
b100111 w'
b100000 h'
b11100000100000 3(
b111 ~'
b101 }'
b101 n'
b110 m'
b11100000100000 {'
b11100000100000 4(
b101 o'
b101000 G(
b100111 .
b1011 K&
b0 /&
1)&
b10 0&
b101000 E(
b101000 y'
b10 |%
1v%
b0 ~%
b11 ]&
b11000000101101 -'
b101000 8(
b111 O&
b101 y&
b11000000101101 +'
b11000000101101 _&
b101 ^&
b111 %&
b101000 q'
b11000000101110 -'
b11111111111111111111111111111010 ,'
b11111111111111111111111111111110 -'
b1 .'
b11000000101101 |&
b1 +'
b1 _&
b11000000101101 W&
b1 |&
b1 W&
#40000
0"
#40500
1"
b101000 ,(
b1 p&
b101000 $(
b1011 J&
b101000 p'
b1 `&
b101000 z'
b101000 /(
b101000 u'
b1 s&
b1 [&
b101000 .(
b101000 w'
b101001 G(
b101000 .
b1 K&
0)&
b0 0&
1-&
1,&
b101001 E(
b101001 y'
1z%
1{%
b0 |%
0v%
b1011 ]&
b110 U&
b110 -'
b0 .'
b101001 8(
b10 O&
b0 +'
b0 _&
b10 %&
b101001 q'
b101 ,'
b101 -'
1u%
b10000 -'
b0 |&
b10000 +'
b10000 _&
b0 W&
0u%
b10000 |&
b10000 W&
#41000
0"
#41500
1"
b1 #'
b101001 ,(
b10000 p&
b101001 $(
b1 J&
b101001 p'
b10000 `&
b101001 z'
b101001 /(
b101001 u'
b10000 s&
b10000 [&
b101001 .(
b101001 w'
b101010 G(
b101001 .
b101 K&
0,&
0-&
1'&
b1000 1&
b1 /&
1L&
b101010 E(
1y%
b101010 y'
b1 ~%
1!&
1#
0{%
0z%
b10 U&
b101010 8(
b1 y&
b1 ^&
b101010 q'
b1 ,'
b1100 -'
b1100 +'
b1100 _&
b1100 |&
b1100 W&
#42000
0"
#42500
1"
b101010 ,(
b1100 p&
b101010 $(
b1100 h&
b110001010011100000100000 f&
b101 J&
b110001010011100000100000 t%
b1100 V&
b101010 p'
b1100 `&
b101010 z'
b101010 /(
b101010 u'
b1100 s&
b1100 [&
b101010 .(
b101010 w'
b1100 r&
b1100 ]&
b100000 N&
b11100000100000 w&
b111 d&
b101 c&
b101 T&
b110 S&
b11100000100000 a&
b11100000100000 x&
b1 Y&
b1011 Z&
b101 U&
b1101 -'
b101011 G(
b1100 &
b101010 .
b1100 2
b1100 >
b111000100011100000100010 6
b111000100011100000100010 4
b111000100011100000100010 (
b1010 K&
b0 1&
0L&
0'&
b11 /&
b1101 +'
b101011 E(
0y%
b101011 y'
b1101 _&
b11 ~%
0#
0!&
b101011 8(
b1101 |&
b11100000100000 y&
b11100000100000 ^&
b1101 W&
b101011 q'
b11100000100000 ,'
b11100000101100 -'
b11100000101100 +'
b11100000101100 _&
b11100000101100 |&
b11100000101100 W&
#43000
0"
#43500
1"
b101011 ,(
b111000100011100000100010 &(
b11100000101100 p&
b1011 n&
b1 l&
b111000100011100000100010 j&
b101011 $(
b111000100011100000100010 "(
b1010 J&
b111000100011100000100010 0'
b101011 p'
b111000100011100000100010 X&
b1 \&
b1011 '
b11100000101100 `&
b111000100011100000100010 r'
b101011 z'
b101011 /(
b101011 u'
b101100 s&
b1011 3
b11100000101100 [&
b101011 .(
b101011 w'
b100010 h'
b11100000100010 3(
b10 }'
b10 n'
b111 m'
b11100000100010 {'
b11100000100010 4(
b10 o'
b101100 G(
b101011 .
b1011 K&
b0 /&
1)&
b10 0&
b101100 E(
b101100 y'
b10 |%
1v%
b0 ~%
b1 ]&
b11100000100001 -'
b101100 8(
b1011 y&
b11100000100001 +'
b11100000100001 _&
b1011 ^&
b101100 q'
b1011 ,'
b1100 -'
b11100000100001 |&
b1100 +'
b1100 _&
b11100000100001 W&
b1100 |&
b1100 W&
#44000
0"
#44500
1"
b101100 ,(
b1100 p&
b101100 $(
b1011 J&
b101100 p'
b1100 `&
b101100 z'
b101100 /(
b101100 u'
b1100 s&
b1100 [&
b101100 .(
b101100 w'
b101101 G(
b101100 .
b1 K&
0)&
b0 0&
1-&
1,&
b101101 E(
b101101 y'
1z%
1{%
b0 |%
0v%
b1100 ]&
b111 U&
b10111 -'
b101101 8(
b10111 +'
b10111 _&
b101101 q'
b10111 |&
b10111 W&
#45000
0"
#45500
1"
b1100 "'
b101101 ,(
b10111 p&
b101101 $(
b1 J&
b101101 p'
b10111 `&
b101101 z'
b101101 /(
b101101 u'
b10111 s&
b10111 [&
b101101 .(
b101101 w'
b101110 G(
b101101 .
b101 K&
0,&
0-&
1'&
b1000 1&
b1 /&
1L&
b101110 E(
1y%
b101110 y'
b1 ~%
1!&
1#
0{%
0z%
b101 U&
b101110 8(
b1 y&
b1 ^&
b101110 q'
b1 ,'
b1101 -'
b1101 +'
b1101 _&
b1101 |&
b1101 W&
#46000
0"
#46500
1"
b101110 ,(
b1101 p&
b101110 $(
b1101 h&
b111000100011100000100010 f&
b101 J&
b111000100011100000100010 t%
b1101 V&
b101110 p'
b1101 `&
b101110 z'
b101110 /(
b101110 u'
b1101 s&
b1101 [&
b101110 .(
b101110 w'
b1101 r&
b1101 ]&
b100010 N&
b11100000100010 w&
b10 c&
b10 T&
b111 S&
b11100000100010 a&
b11100000100010 x&
b1100 Y&
b101 Z&
b10 U&
b1110 -'
b101111 G(
b1101 &
b101110 .
b1101 2
b1101 >
b1000000000000000000000001111 6
b1000000000000000000000001111 4
b1000000000000000000000001111 (
b1010 K&
b0 1&
0L&
0'&
b11 /&
b1110 +'
b101111 E(
0y%
b101111 y'
b1110 _&
b11 ~%
0#
0!&
b101111 8(
b1110 |&
b11100000100010 y&
b11100000100010 ^&
b1110 W&
b101111 q'
b11100000100010 ,'
b11100000101111 -'
b11100000101111 +'
b11100000101111 _&
b11100000101111 |&
b11100000101111 W&
#47000
0"
#47500
1"
b101111 ,(
b1000000000000000000000001111 &(
b11100000101111 p&
b101 n&
b1100 l&
b1000000000000000000000001111 j&
b101111 $(
b1000000000000000000000001111 "(
b1010 J&
b1000000000000000000000001111 0'
b101111 p'
b1000000000000000000000001111 X&
b1100 \&
b101 '
b11100000101111 `&
b1000000000000000000000001111 r'
b101111 z'
b101111 /(
b101111 u'
b101111 s&
b101 3
b11100000101111 [&
b101111 .(
b101111 w'
b1111 h'
b10 @'
b1111 3(
b0 ~'
b0 }'
b0 n'
b0 m'
b1111 {'
b1111 4(
b0 s'
b0 t'
b0 o'
b110000 G(
b101111 .
b1011 K&
b0 /&
1)&
b10 0&
b110000 E(
b110000 y'
b10 |%
1v%
b0 ~%
b1100 ]&
b11100000101110 -'
b110000 8(
b110 O&
b101 y&
b11100000101110 +'
b11100000101110 _&
b101 ^&
b110 %&
b110000 q'
b11100000101111 -'
b11111111111111111111111111111010 ,'
b111 -'
b11100000101110 |&
b111 +'
b111 _&
b11100000101110 W&
b111 |&
b111 W&
#48000
0"
#48500
1"
b110000 ,(
b0 *(
b0 ((
b111 p&
b110000 $(
b1011 J&
b110000 p'
b111 `&
b0 v'
b0 /
b110000 z'
b110000 /(
b110000 u'
b111 s&
b111 [&
b110000 .(
b110000 w'
b110001 G(
b110000 .
b1 K&
0)&
b0 0&
1-&
1,&
b110001 E(
b110001 y'
1z%
1{%
b0 |%
0v%
b1101 ]&
b111 U&
b1000 -'
b110001 8(
b10 O&
b1000 +'
b1000 _&
b10 %&
b110001 q'
b101 ,'
b111 -'
b10010 -'
b1000 |&
b10010 +'
b10010 _&
b1000 W&
b10010 |&
b10010 W&
#49000
0"
#49500
1"
b111 "'
b110001 ,(
b10010 p&
b110001 $(
b1 J&
b111 Y&
b110001 p'
b10010 `&
b110001 z'
b110001 /(
b110001 u'
b10010 s&
b10010 [&
b110001 .(
b110001 w'
b110010 G(
b110001 .
b101 K&
0,&
0-&
1'&
b1000 1&
b1 /&
1L&
b110010 E(
1y%
b110010 y'
b1 ~%
1!&
1#
0{%
0z%
b10 U&
b110010 8(
b1 y&
b1 ^&
b110010 q'
b1 ,'
b1110 -'
b1110 +'
b1110 _&
b1110 |&
b1110 W&
#50000
0"
#50500
1"
b110010 ,(
b1110 p&
b111 l&
b110010 $(
b1110 h&
b1000000000000000000000001111 f&
b101 J&
b1000000000000000000000001111 t%
b1110 V&
b110010 p'
b111 \&
b1110 `&
b110010 z'
b110010 /(
b110010 u'
b1110 s&
b1110 [&
b110010 .(
b110010 w'
b1110 r&
b1110 ]&
b1111 N&
b10 &&
b1111 w&
b0 d&
b0 c&
b0 T&
b0 S&
b1111 a&
b1111 x&
b0 Y&
b0 Z&
b0 U&
b1111 -'
b110011 G(
b1110 &
b110010 .
b1110 2
b1110 >
b10001100000001110000000000000000 6
b10001100000001110000000000000000 4
b10001100000001110000000000000000 (
b1101 K&
b0 1&
0L&
0'&
b11 /&
b1111 +'
b110011 E(
0y%
b110011 y'
b1111 _&
b11 ~%
0#
0!&
b110011 8(
b1111 |&
b1111 y&
b1111 ^&
b1111 W&
b110011 q'
b1111 ,'
b11101 -'
b11101 +'
b11101 _&
b11101 |&
b11101 W&
#51000
0"
#51500
1"
b110011 ,(
b10001100000001110000000000000000 &(
b11101 p&
b0 n&
b0 l&
b10001100000001110000000000000000 j&
b110011 $(
b10001100000001110000000000000000 "(
b1101 J&
b10001100000001110000000000000000 0'
b110011 p'
b10001100000001110000000000000000 X&
b0 \&
b0 '
b11101 `&
b10001100000001110000000000000000 r'
b110011 z'
b110011 /(
b110011 u'
b11101 s&
b0 3
b11101 [&
b110011 .(
b110011 w'
b0 h'
b100011 @'
b0 3(
b111 }'
b111 n'
b0 {'
b0 4(
bx t'
b111 o'
b110100 G(
b110011 .
b1 K&
b0 /&
1L&
b10 .&
b110100 E(
1y%
b110100 y'
b10 }%
b0 ~%
b110100 8(
b1111 |&
b0 y&
b0 ^&
b1111 W&
b110100 q'
b0 ,'
b1110 -'
b1110 +'
b1110 _&
#52000
0"
#52500
1"
b110100 ,(
bx *(
b1110 p&
b110100 $(
b1111 h&
b1 J&
b1111 V&
b110100 p'
b1110 `&
bx /
b110100 z'
b110100 /(
b110100 u'
b1110 s&
b1110 [&
b110100 .(
b110100 w'
b1111 r&
b1111 ]&
b1111 -'
b110101 G(
b1111 &
b110100 .
b1111 2
b1111 >
b10101100000001110000000000010100 6
b10101100000001110000000000010100 4
b10101100000001110000000000010100 (
b101 K&
b0 .&
1'&
b1000 1&
b1 /&
b1111 +'
b110101 E(
b110101 y'
b1111 _&
b1 ~%
1!&
1#
b0 }%
b110101 8(
b1 y&
b1 ^&
b110101 q'
b1 ,'
b10000 -'
b10000 +'
b10000 _&
b10000 |&
b10000 W&
#53000
0"
#53500
1"
b110101 ,(
b10101100000001110000000000010100 &(
b10000 p&
b10101100000001110000000000010100 j&
b110101 $(
b10000 h&
b10101100000001110000000000010100 "(
b10101100000001110000000000010100 f&
b101 J&
b10101100000001110000000000010100 t%
b10101100000001110000000000010100 0'
b10000 V&
b110101 p'
b10101100000001110000000000010100 X&
b10000 `&
b10101100000001110000000000010100 r'
b110101 z'
b110101 /(
b110101 u'
b10000 s&
b10000 [&
b110101 .(
b110101 w'
b10000 r&
b10000 ]&
b10100 h'
b101011 @'
b10100 3(
b10100 {'
b10100 N&
b101011 &&
b10100 w&
b111 c&
b111 T&
b10100 a&
b10100 x&
b111 Z&
b111 U&
b10100 4(
b10001 -'
b110110 G(
b10000 &
b110101 .
b10000 2
b10000 >
b11 6
b11 4
b11 (
b110 K&
b0 1&
0L&
0'&
b11 /&
b10001 +'
b110110 E(
0y%
b110110 y'
b10001 _&
b11 ~%
0#
0!&
b110110 8(
b10001 |&
b10100 y&
b10100 ^&
b10001 W&
b110110 q'
b10100 ,'
b100100 -'
b100100 +'
b100100 _&
b100100 |&
b100100 W&
#54000
0"
#54500
1"
b110110 ,(
b11 &(
b100100 p&
b111 n&
b11 j&
b110110 $(
b11 "(
b110 J&
b11 0'
b110110 p'
b11 X&
b111 '
b100100 `&
b11 r'
b110110 z'
b110110 /(
b110110 u'
b100100 s&
b111 3
b100100 [&
b110110 .(
b110110 w'
b11 h'
b0 @'
b11 3(
b0 }'
b0 n'
b11 {'
b11 4(
b0 t'
b0 o'
b110111 G(
b110110 .
b1001 K&
b10 /&
1)&
b110111 E(
b110111 y'
1v%
b10 ~%
b0 ]&
b10100 -'
b110111 8(
b10100 +'
b10100 _&
b110111 q'
b10100 |&
b10100 W&
#55000
0"
#55500
1"
b110111 ,(
b0 *(
b10100 p&
b110111 $(
b1001 J&
b110111 p'
b10100 `&
b0 /
b110111 z'
b110111 /(
b110111 u'
b10100 s&
b10100 [&
b110111 .(
b110111 w'
b111000 G(
b110111 .
b1 K&
0)&
b0 /&
1(&
1+&
b111000 E(
b111000 y'
1x%
1$
b0 ~%
0v%
0%
05
b10000 ]&
b10100 &
b10100 2
b100100 -'
b0 6
b0 4
b10100 >
b0 (
b111000 8(
b111 y&
b100100 +'
b100100 _&
b111 ^&
b111000 q'
b111 ,'
b10111 -'
b100100 |&
b10111 +'
b10111 _&
b100100 W&
b10111 |&
b10111 W&
#56000
